 BEGIN                                                                  00100000 *ENCODER*
                                                                        00100100 *ENCODER*
    DEFINE       BADTOK                  = 48"00"                #,     00100200 *ENCODER*
                 IDNTOK                  = 48"01"                #,     00100300 *ENCODER*
                 RESTOK                  = 48"02"                #,     00100400 *ENCODER*
                 NUMTOK                  = 48"03"                #,     00100500 *ENCODER*
                 STRTOK                  = 48"04"                #,     00100600 *ENCODER*
                 CHRTOK                  = 48"05"                #,     00100700 *ENCODER*
                 TXTTOK                  = 48"06"                #,     00100800 *ENCODER*
                 EOLTOK                  = 48"07"                #,     00100900 *ENCODER*
                 ETXTOK                  = 48"08"                #;     00101000 *ENCODER*
                                                                        00101100 *ENCODER*
    VALUE ARRAY TABKEYWORD                                              00101200 *ENCODER*
         (                                                              00101300 *ENCODER*
          48"01""X          ", RESTOK,                                  00101400 *ENCODER*
          48"02""V9         ", RESTOK,                                  00101500 *ENCODER*
          48"03""PIC        ", RESTOK,                                  00101600 *ENCODER*
          48"06""OCCURS     ", RESTOK,                                  00101700 *ENCODER*
          5(0)                                                          00101800 *ENCODER*
         );                                                             00101900 *ENCODER*
                                                                        00102000 *ENCODER*
    DEFINE       MAXESCSTACK    = 50 #;                                 00102100 *ENCODER*
    DEFINE        KWENTRYSIZE            = 3                     #,     00102200 *ENCODER*
                  KWINXMAX               = 4                     #,     00102300 *ENCODER*
                 TKWTOKEN                = 0                     #,     00102400 *ENCODER*
                 TKWTOKENLENGTH          = 0].[47:SZBITS         #,     00102500 *ENCODER*
                 TKWTYPETOK              = 2                     #;     00102600 *ENCODER*
                                                                        00102700 *ENCODER*
    DEFINE CASE_ESCAPE =                                                00102800 *ENCODER*
           #;                                                           00102900 *ENCODER*
 %----------------------------------------------------------------------00103000 *ENCODER*
    DEFINE     SZBYTES                 = 1                     #,       00103100 *ENCODER*
               SZBITS1                 = 7                     #,       00103200 *ENCODER*
               SZBITS                  = 8                     #,       00103300 *ENCODER*
               SZTYPETOK               = 1                     #,       00103400 *ENCODER*
               SZBYTESF(SZ)            = ((SZ) DIV 1).[7:48] FOR 1 #,   00103500 *ENCODER*
               SZTYPETOKF (SZ)         = ((SZ) DIV 1).[7:48] FOR 1 #,   00103600 *ENCODER*
               BADENTITY               = 1                     #,       00103700 *ENCODER*
               ISNTENTITY              = 2                     #;       00103800 *ENCODER*
    DEFINE RETURN (RESULT) =                                            00103900 *ENCODER*
        BEGIN                                                           00104000 *ENCODER*
        ENTITYRESULT := RESULT;                                         00104100 *ENCODER*
        GO TO EXIT;                                                     00104200 *ENCODER*
        END OF RETURN #;                                                00104300 *ENCODER*
    ARRAY        ESCSTACK [0:MAXESCSTACK];                              00104400 *ENCODER*
    POINTER      PTOKEN,                                                00104500 *ENCODER*
                 PTOK;                                                  00104600 *ENCODER*
    REAL         SZTOKEN,                                               00104700 *ENCODER*
                 IESCSTACK;                                             00104800 *ENCODER*
 %PROCEDURE NEXTTOKEN; FORWARD;                                         00104900 *ENCODER*
 %PROCEDURE ERROR (MSG); VALUE MSG; STRING MSG; FORWARD;                00105000 *ENCODER*
 %PROCEDURE SEND  (MSG); VALUE MSG; STRING MSG; FORWARD;                00105100 *ENCODER*
 BOOLEAN PROCEDURE KEYWORD (TYPETOK);REAL TYPETOK; FORWARD;             00105200 *ENCODER*
 REAL PROCEDURE ESCAPE; FORWARD;                                        00105300 *ENCODER*
 %----------------------------------------------------------------------00105400 *ENCODER*
 REAL PROCEDURE GETPROGRAM;                                             00105500 *ENCODER*
 FORWARD;                                       %%----00500100          00105600 *ENCODER*
 REAL PROCEDURE GETLEVEL(inxFather, prevLevel, off, len);               00105700 *ENCODER*
 VALUE inxFather, prevLevel, off;                                       00105800 *ENCODER*
 INTEGER inxFather, prevLevel,off,len;                                  00105900 *ENCODER*
 FORWARD;                                       %%----00502600          00106000 *ENCODER*
 $INCLUDE NXTK_FROMDASDL                                                00106100 **USER** 
 BOOLEAN PROCEDURE KEYWORD (TYPETOK);                                   00106200 *ENCODER*
  REAL  TYPETOK;                                                        00106300 *ENCODER*
  BEGIN                                                                 00106400 *ENCODER*
  REAL         IMIN, IMAX, I, INX;                                      00106500 *ENCODER*
  IMAX := KWINXMAX;                                                     00106600 *ENCODER*
  DO   BEGIN                                                            00106700 *ENCODER*
    I   := (IMIN + IMAX) DIV 2;                                         00106800 *ENCODER*
    INX := I * KWENTRYSIZE;                                             00106900 *ENCODER*
    IF (PTOK = POINTER(TABKEYWORD[INX+TKWTOKEN])                        00107000 *ENCODER*
               FOR SZBYTES+SZTOKEN)                                     00107100 *ENCODER*
    THEN BEGIN                                                          00107200 *ENCODER*
         KEYWORD := TRUE;                                               00107300 *ENCODER*
         TYPETOK := TABKEYWORD [INX+TKWTYPETOK];                        00107400 *ENCODER*
         IMIN    := IMAX + 1;                                           00107500 *ENCODER*
         END                                                            00107600 *ENCODER*
    ELSE IF (PTOK < POINTER(TABKEYWORD [INX+TKWTOKEN])                  00107700 *ENCODER*
                    FOR SZBYTES+SZTOKEN)                                00107800 *ENCODER*
    THEN IMAX := I - 1                                                  00107900 *ENCODER*
    ELSE IMIN := I + 1;                                                 00108000 *ENCODER*
    END                                                                 00108100 *ENCODER*
  UNTIL (IMIN > IMAX);                                                  00108200 *ENCODER*
 END OF KEYWORD;                                                        00108300 *ENCODER*
 REAL PROCEDURE ESCAPE;                                                 00108400 *ENCODER*
 BEGIN                                                                  00108500 *ENCODER*
   LABEL   EXIT;                                                        00108600 *ENCODER*
   REAL    INX, INITIAL_IESCSTACK;                                      00108700 *ENCODER*
   IF (IESCSTACK < 0) THEN GO TO EXIT;                                  00108800 *ENCODER*
   INITIAL_IESCSTACK := IESCSTACK;                                      00108900 *ENCODER*
   WHILE (PTOKEN NEQ ETXTOK)                                            00109000 *ENCODER*
   DO   BEGIN                                                           00109100 *ENCODER*
        WHILE (IESCSTACK >= 0)                                          00109200 *ENCODER*
        DO   BEGIN                                                      00109300 *ENCODER*
             INX := ESCSTACK [IESCSTACK];                               00109400 *ENCODER*
             CASE INX                                                   00109500 *ENCODER*
             OF   BEGIN                                                 00109600 *ENCODER*
                  CASE_ESCAPE;                                          00109700 *ENCODER*
             END OF CASE;                                               00109800 *ENCODER*
            IESCSTACK := * - 1;                                         00109900 *ENCODER*
            END;                                                        00110000 *ENCODER*
        NEXTTOKEN;                                                      00110100 *ENCODER*
    IESCSTACK := INITIAL_IESCSTACK;                                     00110200 *ENCODER*
    END;                                                                00110300 *ENCODER*
  INX := 0;                                                             00110400 *ENCODER*
 EXIT:                                                                  00110500 *ENCODER*
  ESCAPE := INX;                                                        00110600 *ENCODER*
 END OF ESCAPE;                                                         00110700 *ENCODER*
                                                                        00500000 *ENCODER*
 REAL PROCEDURE GETPROGRAM;                                             00500100 *ENCODER*
 BEGIN                                                                  00500200 *ENCODER*
                                                                        00500300 *ENCODER*
    LABEL        EXIT, LABA1, LABA2A1, LABA2B1;                         00500400 *ENCODER*
    BOOLEAN      ENTITYENTERED;                                         00500500 *ENCODER*
    REAL         INITIAL_IESCSTACK,                                     00500600 *ENCODER*
                 INXESCAPELABEL,                                        00500700 *ENCODER*
                 ENTITYRESULT,                                          00500800 *ENCODER*
                 INVOKERESULT;                                          00500900 *ENCODER*
    INTEGER actualLevel, len;                                           00501000 **USER** 
    ENTITYENTERED := TRUE;                                              00501100 *ENCODER*
 LABA1:                                                                 00501200 *ENCODER*
 LABA2A1:                                                               00501300 *ENCODER*
    IF (INVOKERESULT := GETLEVEL(0, actualLevel, 0, len) NEQ 0)         00501400 *ENCODER*
    THEN BEGIN                                                          00501500 *ENCODER*
         IF (INVOKERESULT = ISNTENTITY) THEN GO TO LABA2B1;             00501600 *ENCODER*
         RETURN (BADENTITY);                                            00501700 *ENCODER*
         END;                                                           00501800 *ENCODER*
    ENTITYENTERED := TRUE;                                              00501900 *ENCODER*
    GO TO LABA1;                                                        00502000 *ENCODER*
 LABA2B1:                                                               00502100 *ENCODER*
 EXIT:                                                                  00502200 *ENCODER*
    GETPROGRAM := ENTITYRESULT;                                         00502300 *ENCODER*
 END OF GETPROGRAM;                                                     00502400 *ENCODER*
                                                                        00502500 *ENCODER*
 REAL PROCEDURE GETLEVEL(inxFather, prevLevel, off, len);               00502600 *ENCODER*
 VALUE inxFather, prevLevel, off;                                       00502700 *ENCODER*
 INTEGER inxFather, prevLevel,off,len;                                  00502800 *ENCODER*
 BEGIN                                                                  00502900 *ENCODER*
                                                                        00503000 *ENCODER*
    LABEL        EXIT, LABA1, LABA2A1, LABA2A2A1, LABA2A2A2A1,          00503100 *ENCODER*
                 LABA2A2A2B1, LABA2B1, LABA2B2A1, LABA2B2B1, LABA2B3A1, 00503200 *ENCODER*
                 LABA2B3A2A1, LABA2B3A2B1, LABA2B3B1, LABA2B5, LABA2C1, 00503300 *ENCODER*
                 LABA2C2A1, LABA2C2A2A1, LABA2C2A2B1;                   00503400 *ENCODER*
    BOOLEAN      ENTITYENTERED;                                         00503500 *ENCODER*
    REAL         INITIAL_IESCSTACK,                                     00503600 *ENCODER*
                 INXESCAPELABEL,                                        00503700 *ENCODER*
                 ENTITYRESULT,                                          00503800 *ENCODER*
                 INVOKERESULT;                                          00503900 *ENCODER*
    INTEGER actualLevel, inx, childOff, childLen;                       00504000 **USER** 
 LABA1:                                                                 00504100 *ENCODER*
    IF (PTOKEN NEQ NUMTOK)                                              00504200 *ENCODER*
    THEN BEGIN                                                          00504300 *ENCODER*
         IF (NOT ENTITYENTERED) THEN RETURN (ISNTENTITY);               00504400 *ENCODER*
         ERROR ("<NUMERO> EXPECTED");                                   00504500 *ENCODER*
         RETURN (BADENTITY);                                            00504600 *ENCODER*
         END;                                                           00504700 *ENCODER*
    ENTITYENTERED := TRUE;                                              00504800 *ENCODER*
    IF (vlToken LEQ prevLevel) THEN                                     00504900 **USER** 
      RETURN (ISNTENTITY);                                              00505000 **USER** 
    actualLevel := vlToken;                                             00505100 **USER** 
    NEXTTOKEN;                                                          00505200 *ENCODER*
    IF (PTOKEN NEQ IDNTOK)                                              00505300 *ENCODER*
    THEN BEGIN                                                          00505400 *ENCODER*
         ERROR ("<IDENTIFICADOR> EXPECTED");                            00505500 *ENCODER*
         RETURN (BADENTITY);                                            00505600 *ENCODER*
         END;                                                           00505700 *ENCODER*
    inx := getAreaTABDB(CDB_GROUPSIZE*6+szToken+1);                     00505800 **USER** 
    REPLACE PDB_NAME(inx) BY pTok FOR szToken+szBytes;                  00505900 **USER** 
    VDB_OFFSET(inx) := off DIV 1;                                       00506000 **USER** 
    VDB_OCCURS(inx) := 1 DIV 1;                                         00506100 **USER** 
    IF actualLevel = 1 THEN addIspec(inx)                               00506200 **USER** 
    ELSE addChild(inxFather, inx);                                      00506300 **USER** 
    NEXTTOKEN;                                                          00506400 *ENCODER*
 LABA2A1:                                                               00506500 *ENCODER*
    IF (PTOKEN NEQ CHRTOK 48"01"".") THEN GO TO LABA2B1;                00506600 *ENCODER*
    NEXTTOKEN;                                                          00506700 *ENCODER*
    childOff := 0;                                                      00506800 **USER** 
 LABA2A2A1:                                                             00506900 *ENCODER*
    childLen := 0;                                                      00507000 **USER** 
 LABA2A2A2A1:                                                           00507100 *ENCODER*
    IF (INVOKERESULT := GETLEVEL(inx, actualLevel, childOff, childLen)  00507200 *ENCODER*
    NEQ 0)                                                              00507300 *ENCODER*
    THEN BEGIN                                                          00507400 *ENCODER*
         IF (INVOKERESULT = ISNTENTITY) THEN GO TO LABA2A2A2B1;         00507500 *ENCODER*
         RETURN (BADENTITY);                                            00507600 *ENCODER*
         END;                                                           00507700 *ENCODER*
    childOff :=* + childLen;                                            00507800 **USER** 
    len :=* + childLen;                                                 00507900 **USER** 
    VDB_LENGTH(inx) := len DIV 1;                                       00508000 **USER** 
    GO TO LABA2A2A1;                                                    00508100 *ENCODER*
 LABA2A2A2B1:                                                           00508200 *ENCODER*
    GO TO EXIT;                                                         00508300 *ENCODER*
 LABA2B1:                                                               00508400 *ENCODER*
    IF (PTOKEN NEQ RESTOK 48"03""PIC") THEN GO TO LABA2C1;              00508500 *ENCODER*
    NEXTTOKEN;                                                          00508600 *ENCODER*
    VDB_LENGTH(inx) := 1; %Por default                                  00508700 **USER** 
 LABA2B2A1:                                                             00508800 *ENCODER*
    IF (PTOKEN NEQ NUMTOK) THEN GO TO LABA2B2B1;                        00508900 *ENCODER*
    NEXTTOKEN;                                                          00509000 *ENCODER*
    VDB_PIC(inx) := CDB_NUMERIC DIV 1;                                  00509100 **USER** 
    GO TO LABA2B3A1;                                                    00509200 *ENCODER*
 LABA2B2B1:                                                             00509300 *ENCODER*
    IF (PTOKEN NEQ RESTOK 48"01""X")                                    00509400 *ENCODER*
    THEN BEGIN                                                          00509500 *ENCODER*
         ERROR ("ONE OF THE FOLLOWING EXPECTED");                       00509600 *ENCODER*
         SEND ("<NUMERO>");                                             00509700 *ENCODER*
         SEND ("X");                                                    00509800 *ENCODER*
         RETURN (BADENTITY);                                            00509900 *ENCODER*
         END;                                                           00510000 *ENCODER*
    NEXTTOKEN;                                                          00510100 *ENCODER*
    VDB_PIC(inx) := CDB_ALPHA DIV 1;                                    00510200 **USER** 
 LABA2B3A1:                                                             00510300 *ENCODER*
    IF (PTOKEN NEQ CHRTOK 48"01""(") THEN GO TO LABA2B3B1;              00510400 *ENCODER*
    NEXTTOKEN;                                                          00510500 *ENCODER*
    IF (PTOKEN NEQ NUMTOK)                                              00510600 *ENCODER*
    THEN BEGIN                                                          00510700 *ENCODER*
         ERROR ("<NUMERO> EXPECTED");                                   00510800 *ENCODER*
         RETURN (BADENTITY);                                            00510900 *ENCODER*
         END;                                                           00511000 *ENCODER*
    VDB_LENGTH(inx) := vlToken DIV 1;                                   00511100 **USER** 
    NEXTTOKEN;                                                          00511200 *ENCODER*
    IF (PTOKEN NEQ CHRTOK 48"01"")")                                    00511300 *ENCODER*
    THEN BEGIN                                                          00511400 *ENCODER*
         ERROR (") EXPECTED");                                          00511500 *ENCODER*
         RETURN (BADENTITY);                                            00511600 *ENCODER*
         END;                                                           00511700 *ENCODER*
    NEXTTOKEN;                                                          00511800 *ENCODER*
 LABA2B3A2A1:                                                           00511900 *ENCODER*
    IF (PTOKEN NEQ RESTOK 48"02""V9") THEN GO TO LABA2B3A2B1;           00512000 *ENCODER*
    NEXTTOKEN;                                                          00512100 *ENCODER*
    IF (PTOKEN NEQ CHRTOK 48"01""(")                                    00512200 *ENCODER*
    THEN BEGIN                                                          00512300 *ENCODER*
         ERROR ("( EXPECTED");                                          00512400 *ENCODER*
         RETURN (BADENTITY);                                            00512500 *ENCODER*
         END;                                                           00512600 *ENCODER*
    NEXTTOKEN;                                                          00512700 *ENCODER*
    IF (PTOKEN NEQ NUMTOK)                                              00512800 *ENCODER*
    THEN BEGIN                                                          00512900 *ENCODER*
         ERROR ("<NUMERO> EXPECTED");                                   00513000 *ENCODER*
         RETURN (BADENTITY);                                            00513100 *ENCODER*
         END;                                                           00513200 *ENCODER*
    VDB_DECIMALS(inx) := vlToken DIV 1;                                 00513300 **USER** 
    NEXTTOKEN;                                                          00513400 *ENCODER*
    IF (PTOKEN NEQ CHRTOK 48"01"")")                                    00513500 *ENCODER*
    THEN BEGIN                                                          00513600 *ENCODER*
         ERROR (") EXPECTED");                                          00513700 *ENCODER*
         RETURN (BADENTITY);                                            00513800 *ENCODER*
         END;                                                           00513900 *ENCODER*
    NEXTTOKEN;                                                          00514000 *ENCODER*
    GO TO LABA2B5;                                                      00514100 *ENCODER*
 LABA2B3A2B1:                                                           00514200 *ENCODER*
    GO TO LABA2B5;                                                      00514300 *ENCODER*
 LABA2B3B1:                                                             00514400 *ENCODER*
 LABA2B5:                                                               00514500 *ENCODER*
    IF (PTOKEN NEQ CHRTOK 48"01"".")                                    00514600 *ENCODER*
    THEN BEGIN                                                          00514700 *ENCODER*
         ERROR (". EXPECTED");                                          00514800 *ENCODER*
         RETURN (BADENTITY);                                            00514900 *ENCODER*
         END;                                                           00515000 *ENCODER*
    NEXTTOKEN;                                                          00515100 *ENCODER*
    len := VDB_LENGTH(inx) + VDB_DECIMALS(inx);                         00515200 **USER** 
    GO TO EXIT;                                                         00515300 *ENCODER*
 LABA2C1:                                                               00515400 *ENCODER*
    IF (PTOKEN NEQ RESTOK 48"06""OCCURS")                               00515500 *ENCODER*
    THEN BEGIN                                                          00515600 *ENCODER*
         ERROR ("ONE OF THE FOLLOWING EXPECTED");                       00515700 *ENCODER*
         SEND (".");                                                    00515800 *ENCODER*
         SEND ("PIC");                                                  00515900 *ENCODER*
         SEND ("OCCURS");                                               00516000 *ENCODER*
         RETURN (BADENTITY);                                            00516100 *ENCODER*
         END;                                                           00516200 *ENCODER*
    NEXTTOKEN;                                                          00516300 *ENCODER*
    IF (PTOKEN NEQ NUMTOK)                                              00516400 *ENCODER*
    THEN BEGIN                                                          00516500 *ENCODER*
         ERROR ("<NUMERO> EXPECTED");                                   00516600 *ENCODER*
         RETURN (BADENTITY);                                            00516700 *ENCODER*
         END;                                                           00516800 *ENCODER*
    VDB_OCCURS(inx) := vlToken DIV 1;                                   00516900 **USER** 
    NEXTTOKEN;                                                          00517000 *ENCODER*
    IF (PTOKEN NEQ CHRTOK 48"01"".")                                    00517100 *ENCODER*
    THEN BEGIN                                                          00517200 *ENCODER*
         ERROR (". EXPECTED");                                          00517300 *ENCODER*
         RETURN (BADENTITY);                                            00517400 *ENCODER*
         END;                                                           00517500 *ENCODER*
    NEXTTOKEN;                                                          00517600 *ENCODER*
    childOff := 0;                                                      00517700 **USER** 
 LABA2C2A1:                                                             00517800 *ENCODER*
    childLen := 0;                                                      00517900 **USER** 
 LABA2C2A2A1:                                                           00518000 *ENCODER*
    IF (INVOKERESULT := GETLEVEL(inx, actualLevel, childOff, childLen)  00518100 *ENCODER*
    NEQ 0)                                                              00518200 *ENCODER*
    THEN BEGIN                                                          00518300 *ENCODER*
         IF (INVOKERESULT = ISNTENTITY) THEN GO TO LABA2C2A2B1;         00518400 *ENCODER*
         RETURN (BADENTITY);                                            00518500 *ENCODER*
         END;                                                           00518600 *ENCODER*
    childOff :=* + childLen;                                            00518700 **USER** 
    GO TO LABA2C2A1;                                                    00518800 *ENCODER*
 LABA2C2A2B1:                                                           00518900 *ENCODER*
    len := childOff * VDB_OCCURS(inx);                                  00519000 **USER** 
    VDB_LENGTH(inx) := len DIV 1;                                       00519100 **USER** 
 EXIT:                                                                  00519200 *ENCODER*
    GETLEVEL := ENTITYRESULT;                                           00519300 *ENCODER*
 END OF GETLEVEL;                                                       00519400 *ENCODER*
                                                                        90000000 *ENCODER*
 %----------------------------------------------------------------------90000100 *ENCODER*
    PTOKEN    := TOKARRAY;                                              90000200 *ENCODER*
    PTOK      := PTOKEN+SZTYPETOK;                                      90000300 *ENCODER*
    IESCSTACK := -1;                                                    90000400 *ENCODER*
 %----------------------------------------------------------------------90000500 *ENCODER*
    INICIO;                                                             90000600 **USER** 
    NEXTTOKEN;                                                          90000700 *ENCODER*
    GETPROGRAM;                                                         90000800 *ENCODER*
    PROCESO;                                                            90000900 **USER** 
 END OF PROGRAM.                                                        99999999 *ENCODER*
