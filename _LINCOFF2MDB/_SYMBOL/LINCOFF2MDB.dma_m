$SET TADS                                                               10000000          
$LINEINFO                                                               10000100          
$VERSION 01.001.001                                                     10000200          
 PROCEDURE LINCOFF2MDB(PARAM);                                          10000300          
 ARRAY                 PARAM[*];                                        10000400          
 BEGIN                                                                  10000500          
 DEFINE                                                                 10000600          
   K = 1024 #                                                           10000700          
  ,CAND(X,Y) = IF(X)THEN(Y)ELSE FALSE #                                 10000800          
  ,COR(X,Y) = IF(X)THEN TRUE ELSE(Y) #                                  10000900          
  ,NIL = 0 #                                                            10001000          
  ,c = , #                                                              10001100          
  ,szBytes = 1 #                                                        10001200          
  ,vCrLf = 48"0D25" #                                                   10001300          
  ;                                                                     10001400          
 LABEL                                                                  10001500          
   exit                                                                 10001600          
  ;                                                                     10001700          
 EBCDIC ARRAY                                                           10001800          
   dummy[0:1*K]                                                         10001900          
  ;                                                                     10002000          
 HEX ARRAY                                                              10002100          
   hDummy[0] = dummy                                                    10002200          
  ;                                                                     10002300          
 FILE                                                                   10002400          
   LINCOFF                                                              10002500          
     (KIND=DISK                                                         10002600          
     ,MYUSE=IN                                                          10002700          
     ,FILETYPE=7                                                        10002800          
%    ,title="ARC/INPUT/LINCOFF."                                        10002850ADC-191113
     )                                                                  10002900          
  ,CARD                                                                 10003000          
     (KIND=READER                                                       10003100          
     ,MYUSE=IN                                                          10003200          
     ,FILETYPE=7                                                        10003300          
     )                                                                  10003400          
  ,LINE                                                                 10003500          
     (KIND=PRINTER                                                      10003600          
     )                                                                  10003700          
  ,TERM                                                                 10003800          
    (KIND=REMOTE                                                        10003900          
    ,MYUSE=OUT                                                          10004000          
    ,MAXRECSIZE=1920                                                    10004100          
    ,UNITS=CHARACTERS                                                   10004200          
    )                                                                   10004300          
  ,PLAINTXT                                                             10004310ADC-191113
    (KIND=DISK                                                          10004320ADC-191113
    ,MYUSE=OUT                                                          10004330ADC-191113
    ,FRAMESIZE=8                                                        10004340ADC-191113
    ,MAXRECSIZE=40                                                      10004350ADC-191113
    ,BLOCKSIZE=8000                                                     10004360ADC-191113
    )                                                                   10004370ADC-191113
  ;                                                                     10004400          
 INTEGER                                                                10004500          
   len                                                                  10004600          
  ,l                                                                    10004700          
  ,inx                                                                  10004800          
  ;                                                                     10004900          
 POINTER                                                                10005000          
   p                                                                    10005100          
  ;                                                                     10005200          
 TRUTHSET                                                               10005300          
   IDNTOKS (ALPHA OR "-0123456789")                                     10005400          
  ;                                                                     10005500          
                                                                        10005600          
 DEFINE                                                                 10005700          
              TDB_SIZE                =  0                    #,        10005800          
                CDB_SIZEINITIAL       =  4*K                  #,        10005900          
                CDB_OVFLW             =  2                    #,        10006000          
                CDB_INCR              =  4*K                  #,        10006100          
              TDB_VERSION             =  1].[47:16            #,        10006200          
                CDB_VERSION           =  1                    #,        10006300          
              TDB_FIRSTAVAIL          =  1].[31:16            #,        10006400          
                CDB_FIRSTAVAILINITIAL =  3                    #,        10006500          
              TDB_FIRSTISPEC          =  1].[15:16            #,        10006600          
              TDB_LASTISPEC           =  2].[47:16            #,        10006700          
                                                                        10006800          
      VDB_SIZE                =  TABDB[TDB_SIZE]                  #,    10006900          
      VDB_VERSION             =  TABDB[TDB_VERSION]               #,    10007000          
      VDB_FIRSTAVAIL          =  TABDB[TDB_FIRSTAVAIL]            #,    10007100          
      VDB_FIRSTISPEC          =  TABDB[TDB_FIRSTISPEC]            #,    10007200          
      VDB_LASTISPEC           =  TABDB[TDB_LASTISPEC]             #,    10007300          
                                                                        10007400          
              TDB_PREVGROUP           =  0].[47:16            #,        10007500          
              TDB_NEXTGROUP           =  0].[31:16            #,        10007600          
              TDB_FIRSTITEM           =  0].[15:16            #,        10007700          
              TDB_LASTITEM            =  1].[47:16            #,        10007800          
              TDB_OCCURS              =  1].[31:16            #,        10007900          
              TDB_PIC                 =  1].[15:02            #,        10008000          
                CDB_ALPHA             =  1                    #,        10008100          
                CDB_NUMERIC           =  2                    #,        10008200          
                CDB_GROUP             =  0                    #,        10008300          
              TDB_OFFSET              =  2].[47:16            #,        10008400          
              TDB_LENGTH              =  2].[31:16            #,        10008500          
              TDB_DECIMALS            =  2].[15:16            #,        10008600          
              TDB_NAME                =  3                    #,        10008700          
                                                                        10008800          
                CDB_GROUPSIZE         =  3                    #,        10008900          
                                                                        10009000          
      VDB_PREVGROUP(inx)      =  TABDB[inx+TDB_PREVGROUP]         #,    10009100          
      VDB_NEXTGROUP(inx)      =  TABDB[inx+TDB_NEXTGROUP]         #,    10009200          
      VDB_FIRSTITEM(inx)      =  TABDB[inx+TDB_FIRSTITEM]         #,    10009300          
      VDB_LASTITEM(inx)       =  TABDB[inx+TDB_LASTITEM]          #,    10009400          
      VDB_OCCURS(inx)         =  TABDB[inx+TDB_OCCURS]            #,    10009500          
      VDB_PIC(inx)            =  TABDB[inx+TDB_PIC]               #,    10009600          
      VDB_OFFSET(inx)         =  TABDB[inx+TDB_OFFSET]            #,    10009700          
      VDB_LENGTH(inx)         =  TABDB[inx+TDB_LENGTH]            #,    10009800          
      VDB_DECIMALS(inx)       =  TABDB[inx+TDB_DECIMALS]          #,    10009900          
      PDB_NAME(inx)           =POINTER(TABDB[inx+TDB_NAME])       #;    10010000          
                                                                        10010100          
 ARRAY                                                                  10010200          
   TABDB[0:CDB_SIZEINITIAL]                                             10010300          
  ;                                                                     10010400          
                                                                        10010500          
 INTEGER PROCEDURE getAreaTABDB(sz);                                    10010600          
   VALUE                        sz;                                     10010700          
   INTEGER                      sz;                                     10010800          
   BEGIN                                                                10010900          
   COMMENT                                                              10011000          
     Retorna un indice al segmento de la tabla TABPK del tamano         10011100          
     sz bytes solicitado                                                10011200          
   ;                                                                    10011300          
                                                                        10011400          
   getAreaTabDB := VDB_FIRSTAVAIL;                                      10011500          
   IF (SIZE(TABDB)<=(VDB_FIRSTAVAIL+(sz+5)DIV 6)+CDB_OVFLW) THEN        10011600          
     BEGIN                                                              10011700          
     RESIZE(TABDB, MIN(65*K, ((VDB_FIRSTAVAIL+(sz+5)DIV 6)+CDB_INCR)),  10011800          
            RETAIN);                                                    10011900          
     VDB_SIZE := SIZE(TABDB);                                           10012000          
     END;                                                               10012100          
   REPLACE POINTER(TABDB[VDB_FIRSTAVAIL])                               10012200          
        BY 0 FOR ((sz+5)DIV 6) WORDS;                                   10012300          
   VDB_FIRSTAVAIL := (VDB_FIRSTAVAIL + (sz+5)DIV 6) DIV 1;              10012400          
   END of getAreaTABDB;                                                 10012500          
                                                                        10012600          
 PROCEDURE addIspec(inx);                                               10012700          
   VALUE            inx;                                                10012800          
   INTEGER          inx;                                                10012900          
   BEGIN                                                                10013000          
                                                                        10013100          
   IF VDB_FIRSTISPEC = NIL THEN                                         10013200          
     VDB_FIRSTISPEC := inx DIV 1                                        10013300          
   ELSE                                                                 10013400          
     BEGIN                                                              10013500          
     VDB_NEXTGROUP(VDB_LASTISPEC) := inx DIV 1;                         10013600          
     VDB_PREVGROUP(inx) := VDB_LASTISPEC DIV 1;                         10013700          
     END;                                                               10013800          
   VDB_LASTISPEC := inx DIV 1;                                          10013900          
   END of addIspec;                                                     10014000          
                                                                        10014100          
 PROCEDURE addChild(inxFather, inx);                                    10014200          
   VALUE            inxFather, inx;                                     10014300          
   INTEGER          inxFather, inx;                                     10014400          
   BEGIN                                                                10014500          
                                                                        10014600          
   IF VDB_FIRSTITEM(inxFather) = NIL THEN                               10014700          
     VDB_FIRSTITEM(inxFather) := inx DIV 1                              10014800          
   ELSE                                                                 10014900          
     BEGIN                                                              10015000          
     VDB_NEXTGROUP(VDB_LASTITEM(inxFather)) := inx DIV 1;               10015100          
     VDB_PREVGROUP(inx) := VDB_LASTITEM(inxFather) DIV 1;               10015200          
     END;                                                               10015300          
   VDB_LASTITEM(inxFather) := inx DIV 1;                                10015400          
   END of addChild;                                                     10015500          
                                                                        10015600          
 BOOLEAN PROCEDURE getLINCOFF;                                          10015700          
   BEGIN                                                                10015800          
   DEFINE                                                               10015900          
     procedureName = getLINCOFF #                                       10016000          
    ,CFILE = LINCOFF #                                                  10016100          
    ,cfile_error (TEXT) =                                               10016200          
        BEGIN                                                           10016300          
        END #                                                           10016400          
    ;                                                                   10016500          
   EBCDIC ARRAY                                                         10016600          
     dummy [0:1*K]                                                      10016700          
    ;                                                                   10016800          
   BOOLEAN                                                              10016900          
     syntaxOnly                                                         10017000          
    ,syntaxErrors                                                       10017100          
    ,paramOnly                                                          10017200          
    ;                                                                   10017300          
   INTEGER                                                              10017400          
     file_error_count                                                   10017500          
    ;                                                                   10017600          
                                                                        10017700          
%$INCLUDE "LINCOFF2MDB/SYMBOL/INCLUDE/SYNTAX" 100100-99999998           10017800ADC-191115
    DEFINE       BADTOK                  = 48"00"                #,     10017850ADC-191115
                 IDNTOK                  = 48"01"                #,     10017900ADC-191115
                 RESTOK                  = 48"02"                #,     10017950ADC-191115
                 NUMTOK                  = 48"03"                #,     10018000ADC-191115
                 STRTOK                  = 48"04"                #,     10018050ADC-191115
                 CHRTOK                  = 48"05"                #,     10018100ADC-191115
                 TXTTOK                  = 48"06"                #,     10018150ADC-191115
                 EOLTOK                  = 48"07"                #,     10018200ADC-191115
                 ETXTOK                  = 48"08"                #;     10018250ADC-191115
                                                                        10018300ADC-191115
    VALUE ARRAY TABKEYWORD                                              10018350ADC-191115
         (                                                              10018400ADC-191115
          48"01""X          ", RESTOK,                                  10018450ADC-191115
          48"02""V9         ", RESTOK,                                  10018500ADC-191115
          48"03""PIC        ", RESTOK,                                  10018550ADC-191115
          48"06""OCCURS     ", RESTOK,                                  10018600ADC-191115
          5(0)                                                          10018650ADC-191115
         );                                                             10018700ADC-191115
                                                                        10018750ADC-191115
    DEFINE       MAXESCSTACK    = 50 #;                                 10018800ADC-191115
    DEFINE        KWENTRYSIZE            = 3                     #,     10018850ADC-191115
                  KWINXMAX               = 4                     #,     10018900ADC-191115
                 TKWTOKEN                = 0                     #,     10018950ADC-191115
                 TKWTOKENLENGTH          = 0].[47:SZBITS         #,     10019000ADC-191115
                 TKWTYPETOK              = 2                     #;     10019050ADC-191115
                                                                        10019100ADC-191115
    DEFINE CASE_ESCAPE =                                                10019150ADC-191115
           #;                                                           10019200ADC-191115
 %----------------------------------------------------------------------10019250ADC-191115
    DEFINE     SZBYTES                 = 1                     #,       10019300ADC-191115
               SZBITS1                 = 7                     #,       10019350ADC-191115
               SZBITS                  = 8                     #,       10019400ADC-191115
               SZTYPETOK               = 1                     #,       10019450ADC-191115
               SZBYTESF(SZ)            = ((SZ) DIV 1).[7:48] FOR 1 #,   10019500ADC-191115
               SZTYPETOKF (SZ)         = ((SZ) DIV 1).[7:48] FOR 1 #,   10019550ADC-191115
               BADENTITY               = 1                     #,       10019600ADC-191115
               ISNTENTITY              = 2                     #;       10019650ADC-191115
    DEFINE RETURN (RESULT) =                                            10019700ADC-191115
        BEGIN                                                           10019750ADC-191115
        ENTITYRESULT := RESULT;                                         10019800ADC-191115
        GO TO EXIT;                                                     10019850ADC-191115
        END OF RETURN #;                                                10019900ADC-191115
    ARRAY        ESCSTACK [0:MAXESCSTACK];                              10019950ADC-191115
    POINTER      PTOKEN,                                                10020000ADC-191115
                 PTOK;                                                  10020050ADC-191115
    REAL         SZTOKEN,                                               10020100ADC-191115
                 IESCSTACK;                                             10020150ADC-191115
 %PROCEDURE NEXTTOKEN; FORWARD;                                         10020200ADC-191115
 %PROCEDURE ERROR (MSG); VALUE MSG; STRING MSG; FORWARD;                10020250ADC-191115
 %PROCEDURE SEND  (MSG); VALUE MSG; STRING MSG; FORWARD;                10020300ADC-191115
 BOOLEAN PROCEDURE KEYWORD (TYPETOK);REAL TYPETOK; FORWARD;             10020350ADC-191115
 REAL PROCEDURE ESCAPE; FORWARD;                                        10020400ADC-191115
 %----------------------------------------------------------------------10020450ADC-191115
 REAL PROCEDURE GETPROGRAM;                                             10020500ADC-191115
 FORWARD;                                       %%----00500100          10020550ADC-191115
 REAL PROCEDURE GETLEVEL(inxFather, prevLevel, off, len);               10020600ADC-191115
 VALUE inxFather, prevLevel, off;                                       10020650ADC-191115
 INTEGER inxFather, prevLevel,off,len;                                  10020700ADC-191115
 FORWARD;                                       %%----00502600          10020750ADC-191115
%$INCLUDE "LINCOFF2MDB/SYMBOL/NEXTTOKEN/FROMFILE"                       10020800ADC-191115
 %----------------------------------------------------------------------1002085001.001.001
 ARRAY                                                                  1002090001.001.001
   TOKARRAY [0:60]                                                      1002095001.001.001
  ;                                                                     1002100001.001.001
 REAL                                                                   10021050ADC-180810
   VLTOKEN                                                              10021100ADC-180810
  ;                                                                     10021150ADC-180810
                                                                        10021200ADC-180810
%$INCLUDE "LINCOFF2MDB/SYMBOL/NEXTTOKEN/BASE"                           10021250ADC-191115
 %----------------------------------------------------------------------1002130001.001.001
                                                                        10021350ADC-180810
 TYPE STRUCTURE BLOCK NEXTTOKEN_DASDL;                                  10021400ADC-180813
   BEGIN                                                                10021450ADC-180810
                                                                        10021500ADC-180810
   TRUTHSET                                                             1002155001.001.001
     numbers   ("0123456789")                                           10021600ADC-180810
%   ,LETRAS    ((ALPHA OR "abcdefghijklmnopqrstuvwxyz")                 10021650ADC-180920
%                          AND NOT numbers)                             10021700ADC-180920
%   ,IDNCHRS   (ALPHA OR "-" OR "." OR "_"                              10021750ADC-180920
%                      OR "abcdefghijklmnopqrstuvwxyz")                 10021800ADC-180920
%   ,FINZTRING ("'" 48"00")                                             10021850ADC-180920
    ,FINSTRING (""" 48"00")                                             1002190001.001.001
%   ,FINCONSTA (")" 48"00")                                             10021950ADC-180920
    ;                                                                   1002200001.001.001
                                                                        10022050ADC-180810
   EBCDIC ARRAY                                                         1002210001.001.001
     IB [0:1*K]                                                         1002215001.001.001
    ,OB [0:599]                                                         1002220001.001.001
    ,EW [0:599]                                                         1002225001.001.001
    ,EZ [0:131]                                                         1002230001.001.001
    ;                                                                   1002235001.001.001
                                                                        1002240001.001.001
   HEX    ARRAY                                                         1002245001.001.001
     HW [0] = EW                                                        1002250001.001.001
    ;                                                                   1002255001.001.001
                                                                        1002260001.001.001
   EBCDIC ARRAY                                                         1002265001.001.001
     EDATA [0:200]                                                      1002270001.001.001
    ;                                                                   1002275001.001.001
                                                                        1002280001.001.001
   REAL                                                                 1002285001.001.001
     IDATA                                                              1002290001.001.001
    ,NIDATA                                                             1002295001.001.001
    ,MAXIDATA                                                           1002300001.001.001
    ;                                                                   1002305001.001.001
                                                                        1002310001.001.001
   REAL                                                                 1002315001.001.001
     SEQ                                                                1002320001.001.001
    ,NEST                                                               1002325001.001.001
    ,INXNEST                                                            1002330001.001.001
    ,CARDRECSIZE                                                        1002335001.001.001
    ,MAXKEYTOK                                                          1002340001.001.001
    ,WFRECORD                                                           1002345001.001.001
    ,NCC                                                                1002350001.001.001
    ,NUMKEYTOK                                                          1002355001.001.001
    ,MINESCAPE                                                          1002360001.001.001
    ;                                                                   1002365001.001.001
                                                                        10023700ADC-181204
   INTEGER ARRAY                                                        10023750ADC-181204
     iTextArray                                                         10023800ADC-181204
    ,lTextArray                                                         10023850ADC-181204
    ,iSeqArray                                                          10023900ADC-181204
    ,lSeqArray                                                          10023950ADC-181204
    ,iMarkidArray                                                       10024000ADC-181204
    ,lMarkidArray[0:10]                                                 10024050ADC-181204
    ;                                                                   10024100ADC-181204
                                                                        10024150ADC-181204
   DEFINE                                                               10024200ADC-181204
     iText = iTextArray[NEST] #                                         10024250ADC-181204
    ,lText = lTextArray[NEST] #                                         10024300ADC-181204
    ,iSeq  = iSeqArray[NEST] #                                          10024350ADC-181204
    ,lSeq  = lSeqArray[NEST] #                                          10024400ADC-181204
    ,iMarkid = iMarkidArray[NEST] #                                     10024450ADC-181204
    ,lMarkid = lMarkidArray[NEST] #                                     10024500ADC-181204
    ;                                                                   10024550ADC-181204
                                                                        10024600ADC-181204
   BOOLEAN                                                              1002465001.001.001
     showCard                                                           1002470001.001.001
    ,withTerminal                                                       10024750ADC-180810
    ,linePrinted                                                        1002480001.001.001
    ,lineEnterm                                                         1002485001.001.001
    ,printErrors                                                        1002490001.001.001
    ;                                                                   1002495001.001.001
                                                                        1002500001.001.001
   POINTER                                                              1002505001.001.001
     P                                                                  1002510001.001.001
    ,Q                                                                  1002515001.001.001
    ,PW                                                                 1002520001.001.001
    ,PL                                                                 1002525001.001.001
    ,PO                                                                 1002530001.001.001
    ;                                                                   1002535001.001.001
                                                                        1002540001.001.001
   EBCDIC ARRAY                                                         1002545001.001.001
     LINEA [1:179]                                                      1002550001.001.001
    ,LOGO  [0:131]                                                      1002555001.001.001
    ;                                                                   1002560001.001.001
                                                                        1002565001.001.001
   TRUTHSET                                                             1002570001.001.001
     MINUSCULAS ("abcdefghijklmnopqrstuvwxyz")                          1002575001.001.001
    ,ALFABASE   (ALPHA OR MINUSCULAS OR "-")                            10025800ADC-191115
    ,ALFABASE2  (ALPHA OR MINUSCULAS OR "-_")                           1002585001.001.001
    ;                                                                   1002590001.001.001
                                                                        1002595001.001.001
   TRANSLATETABLE                                                       1002600001.001.001
     lower2UPPER ( EBCDIC TO EBCDIC,                                    10026050ADC-180810
                  "abcdefghijklmn|opqrstuvwxyz" TO                      1002610001.001.001
                  "ABCDEFGHIJKLMN\OPQRSTUVWXYZ"                         1002615001.001.001
                 );                                                     1002620001.001.001
                                                                        1002625001.001.001
   DEFINE                                                               1002630001.001.001
     ZOMIT1                  =  1                    #                  1002635001.001.001
    ,ZOMIT2                  =  100                  #                  1002640001.001.001
    ,ZNEST1                  =  6                    #                  1002645001.001.001
    ,ZNEST2                  =  95                   #                  1002650001.001.001
  % ,ZSEQ1                   =  8                    #                  1002655001.001.001
    ,ZSEQ1                   =  0                    #                  1002660001.001.001
  % ,ZSEQ2                   =  97                   #                  1002665001.001.001
    ,ZSEQ2                   =  89                   #                  1002670001.001.001
  % ,ZMARK                   =  108                  #                  1002675001.001.001
    ,ZMARK                   =  100                  #                  1002680001.001.001
  % ,ZTEXT                   =  17                   #                  1002685001.001.001
    ,ZTEXT                   =  9                    #                  1002690001.001.001
    ,MAXSEQ                  =  99999999             #                  1002695001.001.001
    ,SEQ_INCR                =  100                  #                  1002700001.001.001
    ,SEQ_INICIAL             =  100000               #                  1002705001.001.001
    ,SEQ_PROGRAM             =  500000               #                  1002710001.001.001
    ,SEQ_OUTERBLOCK          =  90000000             #                  1002715001.001.001
    ,SEQ_ENDPROGRAM          =  99999999             #                  1002720001.001.001
    ,WFRECSIZE               =  15                   #                  1002725001.001.001
    ,PREINVOKE               =  1                    #                  1002730001.001.001
    ,MIDINVOKE               =  2                    #                  1002735001.001.001
    ,POSINVOKE               =  3                    #                  1002740001.001.001
  % ,PUT                     =  REPLACE PO:PO BY     #                  1002745001.001.001
    ,MAXLARGOSTRING          =  72                   #                  1002750001.001.001
    ;                                                                   1002755001.001.001
                                                                        1002760001.001.001
   FILE                                                                 1002765001.001.001
     CARD1                                                              1002770001.001.001
      (KIND        = DISK                                               1002775001.001.001
      ,MYUSE       = IN                                                 1002780001.001.001
      )                                                                 1002785001.001.001
    ,CARD2                                                              1002790001.001.001
      (KIND        = DISK                                               1002795001.001.001
      ,MYUSE       = IN                                                 1002800001.001.001
      )                                                                 1002805001.001.001
    ,CARD3                                                              1002810001.001.001
      (KIND        = DISK                                               1002815001.001.001
      ,MYUSE       = IN                                                 1002820001.001.001
      )                                                                 1002825001.001.001
    ,CARD4                                                              1002830001.001.001
      (KIND        = DISK                                               1002835001.001.001
      ,MYUSE       = IN                                                 1002840001.001.001
      )                                                                 1002845001.001.001
    ,CARD5                                                              1002850001.001.001
      (KIND        = DISK                                               1002855001.001.001
      ,MYUSE       = IN                                                 1002860001.001.001
      )                                                                 1002865001.001.001
    ;                                                                   1002870001.001.001
                                                                        1002875001.001.001
   SWITCH FILE                                                          1002880001.001.001
     KARD := CFILE, CARD1, CARD2, CARD3, CARD4, CARD5                   1002885001.001.001
    ;                                                                   1002890001.001.001
                                                                        1002895001.001.001
   FILE                                                                 1002900001.001.001
     ERRORS                                                             1002905001.001.001
      (KIND=PRINTER                                                     1002910001.001.001
      ,MAXRECSIZE=132                                                   1002915001.001.001
      ,UNITS=CHARACTERS                                                 1002920001.001.001
      )                                                                 1002925001.001.001
  % ,TERM                                                               10029300ADC-180727
  %   (KIND=REMOTE                                                      10029350ADC-180727
  %   ,MYUSE=OUT                                                        10029400ADC-180727
  %   ,MAXRECSIZE=1920                                                  10029450ADC-180727
  %   ,UNITS=CHARACTERS                                                 10029500ADC-180727
  %   )                                                                 10029550ADC-180727
    ;                                                                   1002960001.001.001
                                                                        1002965001.001.001
 %----------------------------------------------------------------------1002970001.001.001
                                                                        1002975001.001.001
      DEFINE       TGR_SIZE                =  0                    #,   1002980001.001.001
                   CGR_SIZEINICIAL         =  200                  #,   1002985001.001.001
                   CGR_OVFLW               =  1                    #,   1002990001.001.001
                   CGR_INCR                =  50                   #,   1002995001.001.001
                   TGR_FIRSTAVAIL          =  1].[47:16            #,   1003000001.001.001
                   CGR_FIRSTAVAILINICIAL   =  10                   #,   1003005001.001.001
                   TGR_INXSOURCE           =  1].[31:16            #,   1003010001.001.001
                   TGR_INXINITIAL          =  1].[15:16            #,   1003015001.001.001
                   TGR_INXFINAL            =  2].[47:16            #,   1003020001.001.001
                   TGR_USEROPTIONS         =  2].[31:01            #,   1003025001.001.001
                   TGR_SETLIST             =  2].[30:01            #,   1003030001.001.001
                   TGR_SETLISTINCL         =  2].[29:01            #,   1003035001.001.001
                   TGR_SETSINGLE           =  2].[28:01            #,   1003040001.001.001
                   TGR_SYNTAX              =  2].[27:01            #,   1003045001.001.001
                   TGR_LIST                =  2].[26:01            #,   1003050001.001.001
                   TGR_OMIT                =  2].[25:01            #,   1003055001.001.001
                   TGR_SOURCEOPTIONS       =  2].[24:01            #,   1003060001.001.001
                   TGR_INXGLOBALS          =  2].[15:16            #,   1003065001.001.001
                   TGR_FIRSTTOKTYPE        =  3].[47:16            #,   1003070001.001.001
                   TGR_LASTTOKTYPE         =  3].[31:16            #,   1003075001.001.001
                   TGR_INXDEFTOKTYPE       =  3].[15:16            #,   1003080001.001.001
                   TGR_INXCHRTOKTYPE       =  4].[47:16            #,   1003085001.001.001
                   TGR_FIRSTENTITY         =  4].[31:16            #,   1003090001.001.001
                   TGR_LASTENTITY          =  4].[15:16            #,   1003095001.001.001
                   TGR_INXPROGRAM          =  5].[47:16            #,   1003100001.001.001
                                                                        1003105001.001.001
                   TGR_FIRSTBLOCK          =  5].[15:16            #,   1003110001.001.001
                   TGR_LASTBLOCK           =  6].[47:16            #,   1003115001.001.001
                   TGR_FIRSTPROCNAME       =  6].[31:16            #,   1003120001.001.001
                   TGR_LASTPROCNAME        =  6].[15:16            #,   1003125001.001.001
                   TGR_FIRSTKEYTOK         =  7].[47:16            #,   1003130001.001.001
                   TGR_LASTKEYTOK          =  7].[31:16            #,   1003135001.001.001
                   TGR_INXPRETEXT          =  7].[15:16            #,   1003140001.001.001
                   TGR_INXPOSTEXT          =  8].[47:16            #,   1003145001.001.001
                                                                        1003150001.001.001
           VGR_SIZE                =  TABGRAL [TGR_SIZE]           #,   1003155001.001.001
           VGR_FIRSTAVAIL          =  TABGRAL [TGR_FIRSTAVAIL]     #,   1003160001.001.001
           VGR_INXSOURCE           =  TABGRAL [TGR_INXSOURCE]      #,   1003165001.001.001
           VGR_INXINITIAL          =  TABGRAL [TGR_INXINITIAL]     #,   1003170001.001.001
           VGR_INXFINAL            =  TABGRAL [TGR_INXFINAL]       #,   1003175001.001.001
           VGR_USEROPTIONS         =  TABGRAL [TGR_USEROPTIONS]    #,   1003180001.001.001
           VGR_SETLIST             =  TABGRAL [TGR_SETLIST]        #,   1003185001.001.001
           VGR_SETLISTINCL         =  TABGRAL [TGR_SETLISTINCL]    #,   1003190001.001.001
           VGR_SETSINGLE           =  TABGRAL [TGR_SETSINGLE]      #,   1003195001.001.001
           VGR_SYNTAX              =  TABGRAL [TGR_SYNTAX]         #,   1003200001.001.001
           VGR_LIST                =  TABGRAL [TGR_LIST]           #,   1003205001.001.001
           VGR_OMIT                =  TABGRAL [TGR_OMIT]           #,   1003210001.001.001
           VGR_SOURCEOPTIONS       =  TABGRAL [TGR_SOURCEOPTIONS]  #,   1003215001.001.001
           VGR_INXGLOBALS          =  TABGRAL [TGR_INXGLOBALS]     #,   1003220001.001.001
           VGR_FIRSTTOKTYPE        =  TABGRAL [TGR_FIRSTTOKTYPE]   #,   1003225001.001.001
           VGR_LASTTOKTYPE         =  TABGRAL [TGR_LASTTOKTYPE]    #,   1003230001.001.001
           VGR_INXDEFTOKTYPE       =  TABGRAL [TGR_INXDEFTOKTYPE]  #,   1003235001.001.001
           VGR_INXCHRTOKTYPE       =  TABGRAL [TGR_INXCHRTOKTYPE]  #,   1003240001.001.001
           VGR_FIRSTENTITY         =  TABGRAL [TGR_FIRSTENTITY]    #,   1003245001.001.001
           VGR_LASTENTITY          =  TABGRAL [TGR_LASTENTITY]     #,   1003250001.001.001
           VGR_INXPROGRAM          =  TABGRAL [TGR_INXPROGRAM]     #,   1003255001.001.001
           VGR_FIRSTBLOCK          =  TABGRAL [TGR_FIRSTBLOCK]     #,   1003260001.001.001
           VGR_LASTBLOCK           =  TABGRAL [TGR_LASTBLOCK]      #,   1003265001.001.001
           VGR_FIRSTPROCNAME       =  TABGRAL [TGR_FIRSTPROCNAME]  #,   1003270001.001.001
           VGR_LASTPROCNAME        =  TABGRAL [TGR_LASTPROCNAME]   #,   1003275001.001.001
           VGR_FIRSTKEYTOK         =  TABGRAL [TGR_FIRSTKEYTOK]    #,   1003280001.001.001
           VGR_LASTKEYTOK          =  TABGRAL [TGR_LASTKEYTOK]     #,   1003285001.001.001
           VGR_INXPRETEXT          =  TABGRAL [TGR_INXPRETEXT]     #,   1003290001.001.001
           VGR_INXPOSTEXT          =  TABGRAL [TGR_INXPOSTEXT]     #,   1003295001.001.001
                                                                        1003300001.001.001
                   TBL_PREVBLOCK           =  0].[47:16            #,   1003305001.001.001
                   TBL_NEXTBLOCK           =  0].[31:16            #,   1003310001.001.001
                   TBL_BLOCK               =  0].[15:16            #,   1003315001.001.001
                   TBL_FIRSTREC            =  1].[47:16            #,   1003320001.001.001
                   TBL_LASTREC             =  1].[31:16            #,   1003325001.001.001
                   TBL_FOUND               =  1].[15:01            #,   1003330001.001.001
                   TBL_EMPTY               =  1].[14:01            #,   1003335001.001.001
                   CBL_BLOCKSIZE           =  2                    #,   1003340001.001.001
                                                                        1003345001.001.001
           VBL_PREVBLOCK    [INX]  =  TABGRAL [INX+TBL_PREVBLOCK]  #,   1003350001.001.001
           VBL_NEXTBLOCK    [INX]  =  TABGRAL [INX+TBL_NEXTBLOCK]  #,   1003355001.001.001
           VBL_BLOCK        [INX]  =  TABGRAL [INX+TBL_BLOCK]      #,   1003360001.001.001
           VBL_FIRSTREC     [INX]  =  TABGRAL [INX+TBL_FIRSTREC]   #,   1003365001.001.001
           VBL_LASTREC      [INX]  =  TABGRAL [INX+TBL_LASTREC]    #,   1003370001.001.001
           VBL_FOUND        [INX]  =  TABGRAL [INX+TBL_FOUND]      #,   1003375001.001.001
           VBL_EMPTY        [INX]  =  TABGRAL [INX+TBL_EMPTY]      #,   1003380001.001.001
                                                                        1003385001.001.001
                   TEX_TIPO                =  0].[47:16            #,   1003390001.001.001
                   CEX_USER                =  1                    #,   1003395001.001.001
                   CEX_COPY                =  2                    #,   1003400001.001.001
                   CEX_INCLUDE             =  3                    #,   1003405001.001.001
                   TEX_FIRSTREC            =  0].[31:16            #,   1003410001.001.001
                   TEX_LASTREC             =  0].[15:16            #,   1003415001.001.001
                   TEX_INXBLOCK            =  1].[47:16            #,   1003420001.001.001
                   TEX_INXFILENAME         =  1].[31:16            #,   1003425001.001.001
                   TEX_CONSEQRANGE         =  1].[15:01            #,   1003430001.001.001
                   TEX_SEQ1                =  2                    #,   1003435001.001.001
                   TEX_SEQ2                =  3                    #,   1003440001.001.001
                   CEX_EXTSPECSIZE         =  4                    #,   1003445001.001.001
                                                                        1003450001.001.001
           VEX_TIPO         [INX]  =  TABGRAL [INX+TEX_TIPO]       #,   1003455001.001.001
           VEX_FIRSTREC     [INX]  =  TABGRAL [INX+TEX_FIRSTREC]   #,   1003460001.001.001
           VEX_LASTREC      [INX]  =  TABGRAL [INX+TEX_LASTREC]    #,   1003465001.001.001
           VEX_INXBLOCK     [INX]  =  TABGRAL [INX+TEX_INXBLOCK]   #,   1003470001.001.001
           VEX_INXFILENAME  [INX]  =  TABGRAL [INX+TEX_INXFILENAME]#,   1003475001.001.001
           VEX_SEQ1         [INX]  =  TABGRAL [INX+TEX_SEQ1]       #,   1003480001.001.001
           VEX_SEQ2         [INX]  =  TABGRAL [INX+TEX_SEQ2]       #,   1003485001.001.001
           VEX_CONSEQRANGE  [INX]  =  TABGRAL [INX+TEX_CONSEQRANGE]#;   1003490001.001.001
                                                                        1003495001.001.001
                                                                        1003500001.001.001
      ARRAY        TABGRAL [0:CGR_SIZEINICIAL];                         1003505001.001.001
                                                                        1003510001.001.001
   PROCEDURE GETAREA_TABGRAL (INX,PORTE);                               1003515001.001.001
     VALUE   PORTE;                                                     1003520001.001.001
     REAL    PORTE, INX;                                                1003525001.001.001
     BEGIN                                                              1003530001.001.001
                                                                        1003535001.001.001
     procedureName := syntaxErrors;                                     10035400ADC-191115
     INX := VGR_FIRSTAVAIL;                                             1003545001.001.001
     VGR_FIRSTAVAIL := INX + PORTE;                                     1003550001.001.001
     IF (VGR_SIZE < VGR_FIRSTAVAIL + CGR_OVFLW) THEN                    1003555001.001.001
       BEGIN                                                            1003560001.001.001
       VGR_SIZE := VGR_FIRSTAVAIL + CGR_INCR;                           1003565001.001.001
       RESIZE (TABGRAL,VGR_SIZE,RETAIN);                                1003570001.001.001
       END;                                                             1003575001.001.001
     REPLACE TABGRAL [INX] BY 0 FOR PORTE WORDS;                        1003580001.001.001
     END OF GETAREA_TABGRAL;                                            1003585001.001.001
                                                                        1003590001.001.001
   BOOLEAN PROCEDURE FIND_INXBLOCK (BLOCK,INXBLOCK);                    1003595001.001.001
     VALUE   BLOCK;                                                     1003600001.001.001
     REAL    BLOCK, INXBLOCK;                                           1003605001.001.001
     BEGIN                                                              1003610001.001.001
                                                                        1003615001.001.001
     procedureName := syntaxErrors;                                     10036200ADC-191115
     INXBLOCK := VGR_FIRSTBLOCK;                                        1003625001.001.001
     WHILE (IF (INXBLOCK = 0) THEN                                      1003630001.001.001
              FALSE                                                     1003635001.001.001
            ELSE                                                        1003640001.001.001
              VBL_BLOCK [INXBLOCK] NEQ BLOCK                            1003645001.001.001
           )                                                            1003650001.001.001
     DO                                                                 1003655001.001.001
       INXBLOCK := VBL_NEXTBLOCK [INXBLOCK];                            1003660001.001.001
     FIND_INXBLOCK := (INXBLOCK = 0);                                   1003665001.001.001
     END OF FIND_INXBLOCK;                                              1003670001.001.001
                                                                        1003675001.001.001
   PROCEDURE GET_INXBLOCK (BLOCK,INXBLOCK);                             1003680001.001.001
     VALUE   BLOCK;                                                     1003685001.001.001
     REAL    BLOCK, INXBLOCK;                                           1003690001.001.001
     BEGIN                                                              1003695001.001.001
     REAL   INXPREV;                                                    1003700001.001.001
                                                                        1003705001.001.001
     GETAREA_TABGRAL (INXBLOCK,CBL_BLOCKSIZE);                          1003710001.001.001
     VBL_BLOCK [INXBLOCK] := BLOCK;                                     1003715001.001.001
     INXPREV := VGR_LASTBLOCK;                                          1003720001.001.001
     IF (INXPREV = 0) THEN                                              1003725001.001.001
       VGR_FIRSTBLOCK := INXBLOCK                                       1003730001.001.001
     ELSE                                                               1003735001.001.001
       BEGIN                                                            1003740001.001.001
       VBL_PREVBLOCK [INXBLOCK] := INXPREV;                             1003745001.001.001
       VBL_NEXTBLOCK [INXPREV ] := INXBLOCK;                            1003750001.001.001
       END;                                                             1003755001.001.001
     VGR_LASTBLOCK := INXBLOCK;                                         1003760001.001.001
     END OF GET_INXBLOCK;                                               1003765001.001.001
                                                                        1003770001.001.001
   PROCEDURE GET_INXEXTSPEC (INXEXTSPEC,TIPO);                          1003775001.001.001
     VALUE   TIPO;                                                      1003780001.001.001
     REAL    TIPO, INXEXTSPEC;                                          1003785001.001.001
     BEGIN                                                              1003790001.001.001
                                                                        1003795001.001.001
     GETAREA_TABGRAL (INXEXTSPEC,CEX_EXTSPECSIZE);                      1003800001.001.001
     VEX_TIPO [INXEXTSPEC] := TIPO;                                     1003805001.001.001
     END OF GET_INXEXTSPEC;                                             1003810001.001.001
                                                                        1003815001.001.001
 %----------------------------------------------------------------------1003820001.001.001
                                                                        1003825001.001.001
      DEFINE       TNS_SIZE                =  0                    #,   1003830001.001.001
                   CNS_SIZEINICIAL         =  20                   #,   1003835001.001.001
                   CNS_OVFLW               =  1                    #,   1003840001.001.001
                   CNS_INCR                =  10                   #,   1003845001.001.001
                   TNS_FIRSTAVAIL          =  1].[47:16            #,   1003850001.001.001
                   CNS_FIRSTAVAILINICIAL   =  2                    #,   1003855001.001.001
                   TNS_FIRSTNEST           =  1].[31:16            #,   1003860001.001.001
                   TNS_LASTNEST            =  1].[15:16            #,   1003865001.001.001
                                                                        1003870001.001.001
                   TNS_PREVNEST            =  0].[47:16            #,   1003875001.001.001
                   TNS_NEXTNEST            =  0].[31:16            #,   1003880001.001.001
                   TNS_LASTSEQ             =  1                    #,   1003885001.001.001
                   CNS_NESTSIZE            =  2                    #,   1003890001.001.001
                                                                        1003895001.001.001
           VNS_SIZE                =  TABNEST [TNS_SIZE      ]     #,   1003900001.001.001
           VNS_FIRSTAVAIL          =  TABNEST [TNS_FIRSTAVAIL]     #,   1003905001.001.001
           VNS_FIRSTNEST           =  TABNEST [TNS_FIRSTNEST ]     #,   1003910001.001.001
           VNS_LASTNEST            =  TABNEST [TNS_LASTNEST  ]     #,   1003915001.001.001
                                                                        1003920001.001.001
           VNS_PREVNEST [INX]      =  TABNEST [INX+TNS_PREVNEST]   #,   1003925001.001.001
           VNS_NEXTNEST [INX]      =  TABNEST [INX+TNS_NEXTNEST]   #,   1003930001.001.001
           VNS_LASTSEQ  [INX]      =  TABNEST [INX+TNS_LASTSEQ ]   #,   1003935001.001.001
                                                                        1003940001.001.001
                   MAXNEST                 =  5                    #;   1003945001.001.001
                                                                        1003950001.001.001
      ARRAY        TABNEST [0:CNS_SIZEINICIAL];                         1003955001.001.001
                                                                        1003960001.001.001
   PROCEDURE GETAREA_TABNEST (INX,PORTE);                               1003965001.001.001
     VALUE   PORTE;                                                     1003970001.001.001
     REAL    PORTE, INX;                                                1003975001.001.001
     BEGIN                                                              1003980001.001.001
                                                                        1003985001.001.001
     INX := VNS_FIRSTAVAIL;                                             1003990001.001.001
     VNS_FIRSTAVAIL := INX + PORTE;                                     1003995001.001.001
     IF (VNS_SIZE < VNS_FIRSTAVAIL + CNS_OVFLW) THEN                    1004000001.001.001
       BEGIN                                                            1004005001.001.001
       VNS_SIZE := VNS_FIRSTAVAIL + CNS_INCR;                           1004010001.001.001
       RESIZE (TABNEST,VNS_SIZE+1,RETAIN);                              1004015001.001.001
       END;                                                             1004020001.001.001
     REPLACE TABNEST [INX] BY 0 FOR PORTE WORDS;                        1004025001.001.001
     END OF GETAREA_TABNEST;                                            1004030001.001.001
                                                                        1004035001.001.001
   PROCEDURE GET_INXNEST;                                               1004040001.001.001
     BEGIN                                                              1004045001.001.001
     REAL                                                               1004050001.001.001
       INXPREV;                                                         1004055001.001.001
                                                                        1004060001.001.001
     GETAREA_TABNEST (INXNEST,CNS_NESTSIZE);                            1004065001.001.001
     INXPREV := VNS_LASTNEST;                                           1004070001.001.001
     IF (INXPREV = 0) THEN                                              1004075001.001.001
       VNS_FIRSTNEST := INXNEST                                         1004080001.001.001
     ELSE                                                               1004085001.001.001
       BEGIN                                                            1004090001.001.001
       VNS_PREVNEST [INXNEST] := INXPREV;                               1004095001.001.001
       VNS_NEXTNEST [INXPREV] := INXNEST;                               1004100001.001.001
       END;                                                             1004105001.001.001
     VNS_LASTNEST := INXNEST;                                           1004110001.001.001
     REPLACE EZ BY " " FOR 132;                                         1004115001.001.001
     IF (VGR_OMIT = 1) THEN                                             1004120001.001.001
       BEGIN                                                            1004125001.001.001
       REPLACE EZ [ZOMIT1] BY "OMIT";                                   1004130001.001.001
       REPLACE EZ [ZOMIT2] BY "OMIT";                                   1004135001.001.001
       END;                                                             1004140001.001.001
     IF (NEST > 0) THEN                                                 1004145001.001.001
       BEGIN                                                            1004150001.001.001
       REPLACE EZ [ZNEST1] BY NEST FOR 1 DIGITS,".";                    1004155001.001.001
       REPLACE EZ [ZNEST2] BY NEST FOR 1 DIGITS,".";                    1004160001.001.001
       END;                                                             1004165001.001.001
     END OF GET_INXNEST;                                                1004170001.001.001
                                                                        1004175001.001.001
   PROCEDURE DEL_INXNEST;                                               1004180001.001.001
     BEGIN                                                              1004185001.001.001
                                                                        1004190001.001.001
     VNS_FIRSTAVAIL := INXNEST;                                         1004195001.001.001
     INXNEST        := VNS_PREVNEST [INXNEST];                          1004200001.001.001
     VNS_LASTNEST   := INXNEST;                                         1004205001.001.001
     VNS_NEXTNEST [INXNEST] := 0;                                       1004210001.001.001
     REPLACE EZ BY " " FOR 132;                                         1004215001.001.001
     IF (VGR_OMIT = 1) THEN                                             1004220001.001.001
       BEGIN                                                            1004225001.001.001
       REPLACE EZ [ZOMIT1] BY "OMIT";                                   1004230001.001.001
       REPLACE EZ [ZOMIT2] BY "OMIT";                                   1004235001.001.001
       END;                                                             1004240001.001.001
     IF (NEST > 0) THEN                                                 1004245001.001.001
       BEGIN                                                            1004250001.001.001
       REPLACE EZ [ZNEST1] BY NEST FOR 1 DIGITS,".";                    1004255001.001.001
       REPLACE EZ [ZNEST2] BY NEST FOR 1 DIGITS,".";                    1004260001.001.001
       END;                                                             1004265001.001.001
     END OF DEL_INXNEST;                                                1004270001.001.001
                                                                        1004275001.001.001
 %----------------------------------------------------------------------1004280001.001.001
                                                                        1004285001.001.001
   REAL PROCEDURE EXPDIGITS (N);                                        1004290001.001.001
     VALUE   N;                                                         1004295001.001.001
     REAL    N;                                                         1004300001.001.001
     BEGIN                                                              1004305001.001.001
                                                                        1004310001.001.001
     REAL   I;                                                          1004315001.001.001
     WHILE (N :=* DIV 10 NEQ 0) DO I :=* + 1;                           1004320001.001.001
     EXPDIGITS := I + 1;                                                1004325001.001.001
     END OF EXPDIGITS;                                                  1004330001.001.001
                                                                        1004335001.001.001
   PROCEDURE printLine;                                                 1004340001.001.001
     BEGIN                                                              1004345001.001.001
                                                                        1004350001.001.001
     IF (NOT LINE.OPEN) THEN                                            1004355001.001.001
       BEGIN                                                            1004360001.001.001
       REPLACE EZ BY " " FOR 132;                                       1004365001.001.001
       REPLACE EZ [10]                                                  1004370001.001.001
            BY MYSELF.NAME," VERSION ",                                 1004375001.001.001
               COMPILETIME(20) FOR 2 DIGITS,".",                        1004380001.001.001
               COMPILETIME(21) FOR 3 DIGITS,".",                        1004385001.001.001
               COMPILETIME(22) FOR 3 DIGITS;                            1004390001.001.001
       IF (VGR_LIST = 1) THEN                                           1004395001.001.001
         BEGIN                                                          1004400001.001.001
         WRITE (LINE,132,EZ);                                           1004405001.001.001
         WRITE (LINE,<" ",///>);                                        1004410001.001.001
         END;                                                           1004415001.001.001
       END;                                                             1004420001.001.001
     REPLACE EZ BY " " FOR 132;                                         1004425001.001.001
     REPLACE EZ [ZSEQ1] BY IB [iSeq] FOR lSeq;                          10044300ADC-181204
  %  REPLACE EZ [ZSEQ2] BY IB [72] FOR 8;                               1004435001.001.001
     REPLACE EZ [ZMARK] BY IB [iMarkid] FOR lMarkid;                    10044400ADC-181204
     REPLACE EZ [ZTEXT] BY IB [iText] FOR ltext;                        10044450ADC-181204
     WRITE (LINE,132,EZ);                                               1004450001.001.001
     linePrinted := TRUE;                                               1004455001.001.001
     END OF printLine;                                                  1004460001.001.001
                                                                        1004465001.001.001
   PROCEDURE printErrorLine;                                            1004470001.001.001
     BEGIN                                                              1004475001.001.001
                                                                        1004480001.001.001
     IF (NOT ERRORS.OPEN) THEN                                          1004485001.001.001
       BEGIN                                                            1004490001.001.001
       REPLACE EZ BY " " FOR 132;                                       1004495001.001.001
       REPLACE EZ [10] BY MYSELF.NAME," VERSION ",                      1004500001.001.001
                          COMPILETIME(20) FOR 2 DIGITS,".",             1004505001.001.001
                          COMPILETIME(21) FOR 3 DIGITS,".",             1004510001.001.001
                          COMPILETIME(22) FOR 3 DIGITS;                 1004515001.001.001
       WRITE (ERRORS,132,EZ);                                           1004520001.001.001
       END;                                                             1004525001.001.001
     REPLACE EZ BY " " FOR 132;                                         1004530001.001.001
     REPLACE EZ [ZSEQ1] BY IB [iSeq] FOR lSeq;                          10045350ADC-181204
  %  REPLACE EZ [ZSEQ2] BY IB [72] FOR 8;                               1004540001.001.001
     REPLACE EZ [ZMARK] BY IB [iMarkid] FOR lMarkid;                    10045450ADC-181204
     REPLACE EZ [ZTEXT] BY IB [iText] FOR lText;                        10045500ADC-181204
     WRITE (ERRORS,132,EZ);                                             1004555001.001.001
     END OF printErrorLine;                                             1004560001.001.001
                                                                        1004565001.001.001
   PROCEDURE SEND (msg);                                                1004570001.001.001
     VALUE   msg;                                                       1004575001.001.001
     STRING  msg;                                                       1004580001.001.001
     BEGIN                                                              1004585001.001.001
     REAL                                                               1004590001.001.001
       N                                                                1004595001.001.001
      ;                                                                 1004600001.001.001
                                                                        1004605001.001.001
     N := LENGTH (msg);                                                 1004610001.001.001
     IF (VGR_LIST = 1) THEN                                             1004615001.001.001
       WRITE (LINE,<A*>,N,msg);                                         1004620001.001.001
     IF printErrors THEN                                                1004625001.001.001
       WRITE (ERRORS,<A*>,N,msg);                                       1004630001.001.001
     IF withTerminal THEN                                               10046350ADC-180810
       WRITE (TERM,<4"11",A*,4"27D20D03">,N,msg);                       1004640001.001.001
     cfile_error(msg);                                                  1004645001.001.001
     END OF SEND;                                                       1004650001.001.001
                                                                        1004655001.001.001
   PROCEDURE SENDTERM (MSG);                                            1004660001.001.001
     VALUE   MSG;                                                       1004665001.001.001
     STRING  MSG;                                                       1004670001.001.001
     BEGIN                                                              1004675001.001.001
     EBCDIC  ARRAY                                                      1004680001.001.001
       E [0:239]                                                        1004685001.001.001
      ;                                                                 1004690001.001.001
     POINTER                                                            1004695001.001.001
       P                                                                1004700001.001.001
      ;                                                                 1004705001.001.001
                                                                        1004710001.001.001
     REPLACE P:E BY 48"11","# ",MYSELF.NAME;                            1004715001.001.001
     REPLACE P:P-1 BY " ",COMPILETIME(20) FOR 2 DIGITS,".",             1004720001.001.001
                          COMPILETIME(21) FOR 3 DIGITS,".",             1004725001.001.001
                          COMPILETIME(22) FOR 3 DIGITS," ",             1004730001.001.001
                          MSG,48"27D20D03";                             1004735001.001.001
     IF WRITE (TERM,OFFSET(P),E) THEN;                                  10047400ADC-191115
     END OF SENDTERM;                                                   1004745001.001.001
                                                                        1004750001.001.001
   INTEGER                                                              10047550ADC-180727
     lastInfo                                                           10047600ADC-180727
    ;                                                                   10047650ADC-180727
                                                                        10047700ADC-180727
   PROCEDURE SENDPROGRESS(total, actual);                               10047750ADC-180727
     VALUE total, actual;                                               10047800ADC-180727
     INTEGER total, actual;                                             10047850ADC-180727
     BEGIN                                                              10047900ADC-180727
     EBCDIC ARRAY                                                       10047950ADC-180727
       e [0:239]                                                        10048000ADC-180727
      ;                                                                 10048050ADC-180727
     LABEL                                                              10048100ADC-180727
       EXIT                                                             10048150ADC-180727
      ;                                                                 10048200ADC-180727
     POINTER                                                            10048250ADC-180727
       p                                                                10048300ADC-180727
      ;                                                                 10048350ADC-180727
                                                                        10048400ADC-180727
     p := e;                                                            10048450ADC-180727
     IF total > 0 THEN                                                  10048500ADC-180727
       BEGIN                                                            10048550ADC-180727
       IF (actual/total*100 < lastInfo + 2) THEN                        10048600ADC-180727
         GO TO EXIT;                                                    10048650ADC-180727
       lastInfo := actual/total*100;                                    10048700ADC-180727
       REPLACE p:p                                                      10048750ADC-180727
            BY 48"11", "|","=" FOR (lastInfo/2)-1,">";                  10048800ADC-180727
       END;                                                             10048850ADC-180727
     REPLACE p:p BY " " FOR 50-OFFSET(p),"|",48"27D203";                10048900ADC-180727
     IF WRITE (TERM,OFFSET(P),E) THEN;                                  10048950ADC-180727
   EXIT:                                                                10049000ADC-180727
     END of SENDPROGRESS;                                               10049050ADC-180727
                                                                        10049100ADC-180727
   PROCEDURE ERROR (MSG);                                               1004915001.001.001
     VALUE   MSG;                                                       1004920001.001.001
     STRING  MSG;                                                       1004925001.001.001
     BEGIN                                                              1004930001.001.001
     POINTER                                                            1004935001.001.001
       PIB                                                              1004940001.001.001
      ;                                                                 1004945001.001.001
     REAL                                                               1004950001.001.001
       K                                                                1004955001.001.001
      ,N                                                                1004960001.001.001
      ,rModule_GeneralF                                                 1004965001.001.001
      ;                                                                 1004970001.001.001
                                                                        1004975001.001.001
     IF showCard THEN                                                   1004980001.001.001
       BEGIN                                                            1004985001.001.001
       IF (NOT linePrinted) THEN                                        1004990001.001.001
         printLine;                                                     1004995001.001.001
       IF printErrors THEN                                              1005000001.001.001
         printErrorLine;                                                1005005001.001.001
       N := 2 + OFFSET (P);                                             10050100ADC-190627
       K := EXPDIGITS (SEQ);                                            1005015001.001.001
       IF withTerminal AND (NOT lineEnterm) THEN                        10050200ADC-180810
         BEGIN                                                          1005025001.001.001
         lineEnterm := TRUE;                                            1005030001.001.001
         PIB := IB[iText];                                              10050350ADC-181204
         IF paramOnly THEN                                              10050400ADC-190627
           WRITE (TERM,lText,PIB)                                       10050450ADC-190627
         ELSE                                                           10050500ADC-190627
           WRITE (TERM,<4"1127D20D",I*,X1,A72,4"27D20D03">,K,SEQ,       10050550ADC-190627
                  PIB FOR lText);                                       10050600ADC-190627
         END;                                                           1005065001.001.001
       IF (VGR_LIST = 1) THEN                                           1005070001.001.001
         WRITE (LINE,<T*,"*">,ZTEXT+N);                                 1005075001.001.001
       IF printErrors THEN                                              1005080001.001.001
         WRITE (ERRORS,<T*,"*">,ZTEXT+N);                               1005085001.001.001
       IF withTerminal THEN                                             10050900ADC-180810
         IF paramOnly THEN                                              10050950ADC-190627
           WRITE (TERM,<4"11",T*,"*",4"27D20D03">,N)                    10051000ADC-190627
         ELSE                                                           10051050ADC-190627
           WRITE (TERM,<4"11",T*,"*",4"27D20D03">,K+2+N);               1005110001.001.001
       END;                                                             1005115001.001.001
     SEND (MSG);                                                        1005120001.001.001
     DISPLAY(MSG);                                                      1005125001.001.001
     syntaxErrors := TRUE;                                              1005130001.001.001
     file_error_count :=*+1;                                            1005135001.001.001
     END OF ERROR;                                                      1005140001.001.001
                                                                        1005145001.001.001
   PROCEDURE VEOPCION;                                                  1005150001.001.001
     BEGIN                                                              1005155001.001.001
     LABEL                                                              1005160001.001.001
       EXIT,                                                            1005165001.001.001
       READKARD,                                                        1005170001.001.001
       ENDSEARCH,                                                       1005175001.001.001
       SKAN;                                                            1005180001.001.001
     REAL                                                               1005185001.001.001
       I,                                                               1005190001.001.001
       N,                                                               1005195001.001.001
       SEQ1,                                                            1005200001.001.001
       SEQ2,                                                            1005205001.001.001
       IMIN,                                                            1005210001.001.001
       IMAX;                                                            1005215001.001.001
     BOOLEAN                                                            1005220001.001.001
       ENDLOOP,                                                         1005225001.001.001
       BIT;                                                             1005230001.001.001
     POINTER                                                            1005235001.001.001
       Q;                                                               1005240001.001.001
     EBCDIC ARRAY                                                       1005245001.001.001
       ETITLE [0:119];                                                  1005250001.001.001
                                                                        1005255001.001.001
     DEFINE       RETURN (MSG) = BEGIN                                  1005260001.001.001
                                 DISPLAY (MSG !! " " !! STRING (P,1));  1005265001.001.001
                                 GO TO EXIT;                            1005270001.001.001
                                 END OF RETURN #;                       1005275001.001.001
                                                                        1005280001.001.001
     PROCEDURE GETTITLE;                                                1005285001.001.001
       BEGIN                                                            1005290001.001.001
                                                                        1005295001.001.001
       BOOLEAN PROCEDURE GETSUBNAME;                                    1005300001.001.001
         BEGIN                                                          1005305001.001.001
         LABEL     EXIT;                                                1005310001.001.001
         DEFINE    RETURN = BEGIN                                       1005315001.001.001
                               GETSUBNAME := TRUE;                      1005320001.001.001
                               GO TO EXIT;                              1005325001.001.001
                            END OF RETURN #;                            1005330001.001.001
                                                                        1005335001.001.001
         IF (P IN ALPHA) THEN                                           1005340001.001.001
           BEGIN                                                        1005345001.001.001
           SCAN P FOR N:18 WHILE IN ALFABASE;                           1005350001.001.001
           N := 18-N;                                                   1005355001.001.001
           IF (N = 0) OR (N > 17) THEN RETURN;                          1005360001.001.001
           REPLACE Q:Q BY P:P FOR N;                                    1005365001.001.001
           END                                                          1005370001.001.001
         ELSE IF (P = """) THEN                                         1005375001.001.001
           BEGIN                                                        1005380001.001.001
           SCAN P+1 FOR N:20 WHILE NEQ """;                             1005385001.001.001
           N := 20 - N;                                                 1005390001.001.001
           IF (P+(N+1) NEQ """) THEN RETURN;                            1005395001.001.001
           IF (N = 0) OR (N > 18) THEN RETURN;                          1005400001.001.001
           REPLACE Q:Q BY """,P:P+1 UNTIL = """,""";                    1005405001.001.001
           P :=* + 1;                                                   1005410001.001.001
           END                                                          1005415001.001.001
         ELSE                                                           1005420001.001.001
           RETURN;                                                      1005425001.001.001
         SCAN P:P WHILE = " ";                                          1005430001.001.001
       EXIT:                                                            1005435001.001.001
         END OF GETSUBNAME;                                             1005440001.001.001
                                                                        1005445001.001.001
       Q := ETITLE[1];                                                  1005450001.001.001
       IF (P = "*") THEN                                                1005455001.001.001
         REPLACE Q:Q BY P:P FOR 1                                       1005460001.001.001
       ELSE IF (P = "(") THEN                                           1005465001.001.001
         BEGIN                                                          1005470001.001.001
         REPLACE Q:Q BY P:P FOR 1;                                      1005475001.001.001
         SCAN P:P WHILE = " ";                                          1005480001.001.001
         IF GETSUBNAME  THEN                                            1005485001.001.001
           RETURN ("INVALID <USERCODE> SPEC");                          1005490001.001.001
         IF (P NEQ ")") THEN                                            1005495001.001.001
           RETURN (") EXPECTED");                                       1005500001.001.001
         REPLACE Q:Q BY P:P FOR 1;                                      1005505001.001.001
         END;                                                           1005510001.001.001
       SCAN P:P WHILE = " ";                                            1005515001.001.001
       IF GETSUBNAME THEN                                               1005520001.001.001
         RETURN ("INVALID <FILE TITLE> SPEC");                          1005525001.001.001
       WHILE (P = "/") DO                                               1005530001.001.001
         BEGIN                                                          1005535001.001.001
         REPLACE Q:Q BY P:P FOR 1;                                      1005540001.001.001
         SCAN P:P WHILE = " ";                                          1005545001.001.001
         IF GETSUBNAME THEN                                             1005550001.001.001
           RETURN ("INVALID <FILE TITLE> SPEC");                        1005555001.001.001
         END;                                                           1005560001.001.001
       IF (P = "ON") AND NOT (P+2 IN ALPHA) THEN                        1005565001.001.001
         BEGIN                                                          1005570001.001.001
         REPLACE Q:Q BY " ON ";                                         1005575001.001.001
         SCAN P:P+2 WHILE = " ";                                        1005580001.001.001
         IF GETSUBNAME THEN                                             1005585001.001.001
           RETURN ("INVALID <PACK NAME> SPEC");                         1005590001.001.001
         END;                                                           1005595001.001.001
       REPLACE Q:Q BY ".";                                              1005600001.001.001
       END OF GETTITLE;                                                 1005605001.001.001
                                                                        1005610001.001.001
     REPLACE ETITLE [0] BY IB [72] FOR 1;                               1005615001.001.001
     REPLACE IB[iText] BY IB[iText] FOR lText WITH lower2UPPER,48"00";  10056200ADC-181204
     SCAN P:P+1 WHILE = " ";                                            1005625001.001.001
                                                                        1005630001.001.001
     IF ((P = "INCLUDE") AND NOT (P+7 IN ALPHA)) THEN                   1005635001.001.001
       BEGIN                                                            1005640001.001.001
       SCAN P:P+7 WHILE = " ";                                          1005645001.001.001
       GETTITLE;                                                        1005650001.001.001
       IF (P IN numbers) THEN                                           10056550ADC-180810
         BEGIN                                                          1005660001.001.001
         SCAN P FOR N:99 WHILE IN numbers;                              10056650ADC-180810
         IF (N:=99-N > 12)  THEN                                        1005670001.001.001
           RETURN ("TOO MANY DIGITS");                                  1005675001.001.001
         SEQ1 := INTEGER(P,N);                                          1005680001.001.001
         SCAN P:P+N WHILE = " ";                                        1005685001.001.001
         IF (P NEQ  "-")    THEN                                        1005690001.001.001
           RETURN ("- EXPECTED");                                       1005695001.001.001
         SCAN P:P+1 WHILE = " ";                                        1005700001.001.001
         IF (P IN numbers) THEN                                         10057050ADC-180810
           BEGIN                                                        1005710001.001.001
           SCAN P FOR N:99 WHILE IN numbers;                            10057150ADC-180810
           IF (N:=99-N > 12) THEN                                       1005720001.001.001
             RETURN ("TOO MANY DIGITS");                                1005725001.001.001
           SEQ2 := INTEGER(P,N);                                        1005730001.001.001
           SCAN P:P+N WHILE = " ";                                      1005735001.001.001
           END                                                          1005740001.001.001
         ELSE IF (P = "END") AND NOT (P+3 IN ALPHA) THEN                1005745001.001.001
           BEGIN                                                        1005750001.001.001
           SCAN P:P+3 WHILE = " ";                                      1005755001.001.001
           SEQ2 := MAXSEQ;                                              1005760001.001.001
           END                                                          1005765001.001.001
         ELSE                                                           1005770001.001.001
           RETURN ("NUMBER OR END EXPECTED");                           1005775001.001.001
         END                                                            1005780001.001.001
       ELSE                                                             1005785001.001.001
         BEGIN                                                          1005790001.001.001
         SEQ1 := 0;                                                     1005795001.001.001
         SEQ2 := MAXSEQ;                                                1005800001.001.001
         END;                                                           1005805001.001.001
       IF (NEST GEQ MAXNEST) THEN                                       1005810001.001.001
         RETURN ("MAXIMUM INCLUDE LEVEL EXCEEDED");                     1005815001.001.001
       NEST :=* + 1;                                                    1005820001.001.001
       REPLACE KARD[NEST].TITLE BY ETITLE [1];                          1005825001.001.001
       KARD[NEST].FILETYPE := 7;                                        1005830001.001.001
       KARD[NEST].OPEN     := TRUE;                                     1005835001.001.001
       GET_INXNEST;                                                     1005840001.001.001
       IF (SEQ2 > MAXSEQ) OR (SEQ1 > SEQ2) THEN                         1005845001.001.001
         RETURN ("INVALID SEQ RANGE");                                  1005850001.001.001
       IMIN := 0;                                                       1005855001.001.001
       IMAX := KARD[NEST].LASTRECORD;                                   1005860001.001.001
       I    := (IMIN + IMAX + 1) DIV 2;                                 1005865001.001.001
       GO TO READKARD;                                                  1005870001.001.001
       DO                                                               1005875001.001.001
         BEGIN                                                          1005880001.001.001
         IF (SEQ = SEQ1) THEN                                           1005885001.001.001
           GO TO ENDSEARCH;                                             1005890001.001.001
         IF (SEQ < SEQ1) THEN                                           1005895001.001.001
           I := ((IMIN:=I+1) + IMAX) DIV 2                              1005900001.001.001
         ELSE                                                           1005905001.001.001
           I := (IMIN + (IMAX:=I))   DIV 2;                             1005910001.001.001
   READKARD:                                                            1005915001.001.001
         READ (KARD[NEST][I],CARDRECSIZE,IB);                           1005920001.001.001
         SEQ := INTEGER (IB[72],8);                                     1005925001.001.001
         END                                                            1005930001.001.001
       UNTIL (IMIN GEQ IMAX);                                           1005935001.001.001
   ENDSEARCH:                                                           1005940001.001.001
       IF (SEQ < SEQ1) OR (SEQ > SEQ2) THEN                             1005945001.001.001
         BEGIN                                                          1005950001.001.001
         LOCK (KARD[NEST]);                                             1005955001.001.001
         NEST :=* - 1;                                                  1005960001.001.001
         DEL_INXNEST;                                                   1005965001.001.001
         END                                                            1005970001.001.001
       ELSE                                                             1005975001.001.001
         BEGIN                                                          1005980001.001.001
         VNS_LASTSEQ [INXNEST] := SEQ2;                                 1005985001.001.001
         I := KARD[NEST].RECORD;                                        1005990001.001.001
         SEEK (KARD[NEST][I]);                                          1005995001.001.001
         END;                                                           1006000001.001.001
       END                                                              1006005001.001.001
     ELSE                                                               1006010001.001.001
       BEGIN                                                            1006015001.001.001
   SKAN:                                                                1006020001.001.001
       WHILE ((P = "SET"  ) AND NOT (P+3 IN ALPHA))                     1006025001.001.001
          OR ((P = "RESET") AND NOT (P+5 IN ALPHA))                     1006030001.001.001
          OR ((P = "POP")   AND NOT (P+3 IN ALPHA)) DO                  1006035001.001.001
         BEGIN                                                          1006040001.001.001
         IF (P = "SET") THEN                                            1006045001.001.001
           BEGIN                                                        1006050001.001.001
           BIT := TRUE;                                                 1006055001.001.001
           SCAN P:P+3 WHILE = " ";                                      1006060001.001.001
           END                                                          1006065001.001.001
         ELSE                                                           1006070001.001.001
           BEGIN                                                        1006075001.001.001
           BIT := FALSE;                                                1006080001.001.001
           SCAN P:P+5 WHILE = " ";                                      1006085001.001.001
           END;                                                         1006090001.001.001
         ENDLOOP := FALSE;                                              1006095001.001.001
         DO                                                             1006100001.001.001
           BEGIN                                                        1006105001.001.001
           IF (P = "LIST") AND NOT (P+4 IN ALPHA) THEN                  1006110001.001.001
             BEGIN                                                      1006115001.001.001
             SCAN P:P+4 WHILE = " ";                                    1006120001.001.001
             IF (VGR_LIST = 0) AND BIT THEN                             1006125001.001.001
               BEGIN                                                    1006130001.001.001
               REPLACE IB [72] BY ETITLE [0] FOR 1;                     1006135001.001.001
               printLine;                                               1006140001.001.001
               REPLACE IB [72] BY 48"00";                               1006145001.001.001
               END;                                                     1006150001.001.001
             VGR_LIST := REAL (BIT);                                    1006155001.001.001
             END                                                        1006160001.001.001
           ELSE IF (P = "OMIT") AND NOT (P+4 IN ALPHA) THEN             1006165001.001.001
             BEGIN                                                      1006170001.001.001
             SCAN P:P+4 WHILE = " ";                                    1006175001.001.001
             VGR_OMIT := REAL (BIT);                                    1006180001.001.001
             IF BIT THEN                                                1006185001.001.001
               REPLACE EZ [ZOMIT1] BY "OMIT"                            1006190001.001.001
             ELSE                                                       1006195001.001.001
               REPLACE EZ [ZOMIT1] BY "    ";                           1006200001.001.001
             REPLACE EZ [ZOMIT2] BY EZ [ZOMIT1] FOR 4;                  1006205001.001.001
             END                                                        1006210001.001.001
           ELSE IF (P = "ZIP") AND NOT (P+3 IN ALPHA) THEN              10062150ADC-191115
             BEGIN                                                      10062200ADC-191115
             SCAN P:P+3 WHILE = " ";                                    10062250ADC-191115
             END                                                        10062300ADC-191115
           ELSE IF (P = "DMCONTROL") AND NOT (P+9 IN ALPHA) THEN        10062350ADC-191115
             BEGIN                                                      10062400ADC-191115
             SCAN P:P+9 WHILE = " ";                                    10062450ADC-191115
             END                                                        10062500ADC-191115
           ELSE IF (P = "SEQ") AND NOT (P+3 IN ALPHA) THEN              10062550ADC-191115
             BEGIN                                                      10062600ADC-191115
             SCAN P:P+3 WHILE = " ";                                    10062650ADC-191115
             END                                                        10062700ADC-191115
           ELSE IF (P = "LINC14") AND NOT (P+6 IN ALPHA) THEN           10062750ADC-191115
             BEGIN                                                      10062800ADC-191115
             SCAN P:P+6 WHILE = " ";                                    10062850ADC-191115
             END                                                        10062900ADC-191115
           ELSE                                                         1006295001.001.001
             ENDLOOP := TRUE;                                           1006300001.001.001
           END                                                          1006305001.001.001
         UNTIL ENDLOOP;                                                 1006310001.001.001
         END;                                                           1006315001.001.001
                                                                        1006320001.001.001
       IF (P = "PAGE") AND NOT (P+4 IN ALPHA) THEN                      1006325001.001.001
         BEGIN                                                          1006330001.001.001
         SCAN P:P+4 WHILE = " ";                                        1006335001.001.001
         IF (VGR_LIST = 1) THEN                                         1006340001.001.001
           WRITE (LINE [SKIP 1]);                                       1006345001.001.001
         GO TO SKAN;                                                    1006350001.001.001
         END;                                                           1006355001.001.001
                                                                        1006360001.001.001
       IF (P = "SYNTAX") AND NOT (P+6 IN ALPHA) THEN                    1006365001.001.001
         BEGIN                                                          1006370001.001.001
         SCAN P:P+6 WHILE = " ";                                        1006375001.001.001
         VGR_SYNTAX := 1;                                               1006380001.001.001
         GO TO SKAN;                                                    1006385001.001.001
         END;                                                           1006390001.001.001
                                                                        1006395001.001.001
       IF (P NEQ 48"00") THEN                                           1006400001.001.001
         RETURN ("OPCION INVALIDA");                                    1006405001.001.001
       END;                                                             1006410001.001.001
   EXIT:                                                                1006415001.001.001
     END OF VE_OPCION;                                                  1006420001.001.001
                                                                        1006425001.001.001
   BOOLEAN PROCEDURE LEECARD;                                           1006430001.001.001
     BEGIN                                                              1006435001.001.001
     LABEL                                                              1006440001.001.001
       EXIT                                                             1006445001.001.001
      ,ENDNEST                                                          1006450001.001.001
      ,READACARD                                                        1006455001.001.001
      ;                                                                 1006460001.001.001
                                                                        1006465001.001.001
     REAL                                                               1006470001.001.001
       N                                                                1006475001.001.001
      ,L                                                                1006480001.001.001
      ;                                                                 1006485001.001.001
                                                                        1006490001.001.001
   READACARD:                                                           1006495001.001.001
     IF READ (KARD [NEST], CARDRECSIZE, IB) THEN                        1006500001.001.001
       BEGIN                                                            1006505001.001.001
       IF (NEST = 0) THEN                                               1006510001.001.001
         BEGIN                                                          1006515001.001.001
         LEECARD := TRUE;                                               1006520001.001.001
         GO TO EXIT;                                                    1006525001.001.001
         END;                                                           1006530001.001.001
   ENDNEST:                                                             1006535001.001.001
       LOCK (KARD [NEST]);                                              1006540001.001.001
       NEST    :=* - 1;                                                 1006545001.001.001
       DEL_INXNEST;                                                     1006550001.001.001
       GO TO READACARD;                                                 1006555001.001.001
       END;                                                             1006560001.001.001
                                                                        10065650ADC-181204
     CASE KARD[NEST].FILEKIND OF                                        1006570001.001.001
       BEGIN                                                            1006575001.001.001
       (VALUE(ALGOLSYMBOL)):                                            1006580001.001.001
       (VALUE(CCSYMBOL)):                                               10065850ADC-181204
       (VALUE(DASDLSYMBOL)):                                            10065900ADC-181204
       (VALUE(DCALGOLSYMBOL)):                                          1006595001.001.001
       (VALUE(DCPSYMBOL)):                                              10066000ADC-181204
       (VALUE(DMALGOLSYMBOL)):                                          1006605001.001.001
       (VALUE(FORTRAN77SYMBOL)):                                        10066100ADC-181204
       (VALUE(JAVASYMBOL)):                                             10066150ADC-181204
       (VALUE(NDLSYMBOL)):                                              10066200ADC-181204
       (VALUE(NDLIISYMBOL)):                                            10066250ADC-181204
       (VALUE(NEWPSYMBOL)):                                             10066300ADC-181204
       (VALUE(PASCALSYMBOL)):                                           10066350ADC-181204
       (VALUE(PASCAL83SYMBOL)):                                         10066400ADC-181204
       (VALUE(PLISYMBOL)):                                              10066450ADC-181204
       (VALUE(SANSSYMBOL)):                                             10066500ADC-181204
       (VALUE(SEQDATA)):                                                10066550ADC-181204
       (VALUE(SORTSYMBOL)):                                             10066600ADC-181204
       (VALUE(TEXTDATA)):                                               10066650ADC-181220
         BEGIN                                                          10066700ADC-181204
         iText := 0;                                                    10066750ADC-181204
         lText := NCC := 72;                                            10066800ADC-181204
         iSeq := 72;                                                    10066850ADC-181204
         lSeq := 8;                                                     10066900ADC-181204
         iMarkid := 80;                                                 10066950ADC-181204
         lMarkid := 10;                                                 10067000ADC-181204
         END;                                                           10067050ADC-181204
       (192): %VALUE(DATA)                                              10067100ADC-181220
         BEGIN                                                          10067150ADC-181204
         iText := 0;                                                    10067200ADC-181204
         lText := NCC := IF KARD[NEST].FRAMESIZE=8 THEN                 10067250ADC-181204
                           KARD[NEST].MAXRECSIZE                        10067300ADC-181204
                         ELSE KARD[NEST].MAXRECSIZE*6;                  10067350ADC-181204
         iSeq := 0;                                                     10067400ADC-181204
         lSeq := 0;                                                     10067450ADC-181204
         iMarkid := 0;                                                  10067500ADC-181204
         lMarkid := 0;                                                  10067550ADC-181204
         END;                                                           10067600ADC-181204
       (VALUE(JOBSYMBOL)):                                              10067650ADC-181204
         BEGIN                                                          10067700ADC-181204
         iText := 0;                                                    10067750ADC-181204
         lText := NCC := 80;                                            10067800ADC-181204
         iSeq := 82;                                                    10067850ADC-181204
         lSeq := 8;                                                     10067900ADC-181204
         iMarkid := 0;                                                  10067950ADC-181204
         lMarkid := 0;                                                  10068000ADC-181204
         END;                                                           10068050ADC-181204
       (VALUE(BASICSYMBOL)):                                            10068100ADC-181204
         BEGIN                                                          10068150ADC-181204
         iText := 4;                                                    10068200ADC-181204
         lText := NCC := 72;                                            10068250ADC-181204
         iSeq := 0;                                                     10068300ADC-181204
         lSeq := 4;                                                     10068350ADC-181204
         iMarkid := 72;                                                 10068400ADC-181204
         lMarkid := 8;                                                  10068450ADC-181204
         END;                                                           10068500ADC-181204
       (VALUE(BINDERSYMBOL)):                                           10068550ADC-181204
       (VALUE(FORTRANSYMBOL)):                                          10068600ADC-181204
       (VALUE(XFORTRANSYMBOL)):                                         10068650ADC-181204
         BEGIN                                                          10068700ADC-181204
         iText := 0;                                                    10068750ADC-181204
         lText := NCC := 72;                                            10068800ADC-181204
         iSeq := 72;                                                    10068850ADC-181204
         lSeq := 8;                                                     10068900ADC-181204
         iMarkid := 0;                                                  10068950ADC-181204
         lMarkid := 0;                                                  10069000ADC-181204
         END;                                                           10069050ADC-181204
       (VALUE(CDATA)):                                                  10069100ADC-181204
         BEGIN                                                          10069150ADC-181204
         iText := 0;                                                    10069200ADC-181204
         lText := NCC := 80;                                            10069250ADC-181204
         iSeq := 0;                                                     10069300ADC-181204
         lSeq := 0;                                                     10069350ADC-181204
         iMarkid := 0;                                                  10069400ADC-181204
         lMarkid := 0;                                                  10069450ADC-181204
         END;                                                           10069500ADC-181204
       (VALUE(COBOLSYMBOL)):                                            10069550ADC-181204
       (VALUE(COBOL74SYMBOL)):                                          10069600ADC-181204
       (VALUE(COBOL85SYMBOL)):                                          10069650ADC-181204
       (VALUE(LCOBOLSYMBOL)):                                           10069700ADC-181204
         BEGIN                                                          10069750ADC-181204
         iText := 6;                                                    10069800ADC-181204
         lText := NCC := 66;                                            10069850ADC-181204
         iSeq := 0;                                                     10069900ADC-181204
         lSeq := 6;                                                     10069950ADC-181204
         iMarkid := 72;                                                 10070000ADC-181204
         lMarkid := 6;                                                  10070050ADC-181204
         END;                                                           10070100ADC-181204
       (VALUE(CSEQDATA)):                                               10070150ADC-181204
         BEGIN                                                          10070200ADC-181204
         iText := 6;                                                    10070250ADC-181204
         lText := NCC := 74;                                            10070300ADC-181204
         iSeq := 0;                                                     10070350ADC-181204
         lSeq := 5;                                                     10070400ADC-181204
         iMarkid := 0;                                                  10070450ADC-181204
         lMarkid := 0;                                                  10070500ADC-181204
         END;                                                           10070550ADC-181204
       (VALUE(ESPOLSYMBOL)):                                            10070600ADC-181204
         BEGIN                                                          10070650ADC-181204
         iText := 0;                                                    10070700ADC-181204
         lText := NCC := 72;                                            10070750ADC-181204
         iSeq := 72;                                                    10070800ADC-181204
         lSeq := 8;                                                     10070850ADC-181204
         iMarkid := 80;                                                 10070900ADC-181204
         lMarkid := 8;                                                  10070950ADC-181204
         END;                                                           10071000ADC-181204
       (VALUE(RPGSYMBOL)):                                              10071050ADC-181204
         BEGIN                                                          10071100ADC-181204
         iText := 5;                                                    10071150ADC-181204
         lText := NCC := 75;                                            10071200ADC-181204
         iSeq := 0;                                                     10071250ADC-181204
         lSeq := 5;                                                     10071300ADC-181204
         iMarkid := 80;                                                 10071350ADC-181204
         lMarkid := 10;                                                 10071400ADC-181204
         END;                                                           10071450ADC-181204
       (VALUE(WIDESYMBOL)):                                             10071500ADC-181220
         BEGIN                                                          10071550ADC-181204
         iText := 21;                                                   10071600ADC-181204
         lText := NCC := 99;                                            10071650ADC-181206
         iSeq := 0;                                                     10071700ADC-181204
         lSeq := 11;                                                    10071750ADC-181204
         iMarkid := 11;                                                 10071800ADC-181204
         lMarkid := 10;                                                 10071850ADC-181204
         END;                                                           10071900ADC-181204
       ELSE:                                                            10071950ADC-181204
         BEGIN                                                          10072000ADC-181204
         DISPLAY("FILEKIND NO RECONOCIDO: "CAT                          10072050ADC-181204
                 STRING(KARD[NEST].FILEKIND,*));                        10072100ADC-181204
         iText := 0;                                                    10072150ADC-181220
         lText := NCC := IF KARD[NEST].FRAMESIZE=8 THEN                 10072200ADC-181204
                           KARD[NEST].MAXRECSIZE                        10072250ADC-181204
                         ELSE KARD[NEST].MAXRECSIZE*6;                  10072300ADC-181204
         iSeq := 0;                                                     10072350ADC-181204
         lSeq := 0;                                                     10072400ADC-181204
         iMarkid := 0;                                                  10072450ADC-181204
         lMarkid := 0;                                                  10072500ADC-181204
         END;                                                           10072550ADC-181204
       END of CASE;                                                     1007260001.001.001
                                                                        10072650ADC-181204
     SEQ := INTEGER (IB[iSeq], lSeq);                                   10072700ADC-181204
     IF (SEQ > VNS_LASTSEQ [INXNEST]) THEN GO TO ENDNEST;               1007275001.001.001
     linePrinted := lineEnterm := FALSE;                                1007280001.001.001
     IF (VGR_LIST = 1) THEN                                             1007285001.001.001
       printLine;                                                       1007290001.001.001
     SCAN P:IB[iText] FOR lText WHILE = " ";                            10072950ADC-181204
     IF (P = "$") THEN                                                  1007300001.001.001
       BEGIN                                                            1007305001.001.001
       VEOPCION;                                                        1007310001.001.001
       GO TO READACARD;                                                 1007315001.001.001
       END;                                                             1007320001.001.001
     IF (VGR_OMIT = 1) THEN                                             1007325001.001.001
       GO TO READACARD;                                                 1007330001.001.001
     Q   := IB[iText];                                                  10073350ADC-181204
   EXIT:                                                                1007340001.001.001
     IF (KARD[0].KIND = VALUE(DISK)) THEN                               10073450ADC-181204
       SENDPROGRESS(KARD[0].LASTRECORD, KARD[0].CURRENTRECORD);         10073500ADC-180727
     END OF LEECARD;                                                    1007355001.001.001
                                                                        1007360001.001.001
   PROCEDURE NEXTTOKEN;                                                 10073650ADC-180810
     BEGIN                                                              1007370001.001.001
     LABEL                                                              1007375001.001.001
       SIGUE                                                            1007380001.001.001
      ,EXIT                                                             1007385001.001.001
      ;                                                                 1007390001.001.001
     REAL                                                               1007395001.001.001
       N                                                                1007400001.001.001
      ,TYPETOK                                                          1007405001.001.001
      ;                                                                 1007410001.001.001
     DEFINE  RETURN (MSG) = BEGIN                                       1007415001.001.001
                           SEND (MSG);                                  1007420001.001.001
                            REPLACE PTOKEN BY BADTOK;                   1007425001.001.001
                            GO TO EXIT;                                 1007430001.001.001
                            END OF RETURN #;                            1007435001.001.001
                                                                        1007440001.001.001
     IF (PTOKEN = ETXTOK) THEN                                          1007445001.001.001
       GO TO EXIT;                                                      1007450001.001.001
   SIGUE:                                                               1007455001.001.001
     SCAN P:Q FOR NCC:NCC WHILE = " ";                                  1007460001.001.001
                                                                        1007465001.001.001
     IF (PTOKEN = EOLTOK) THEN                                          1007470001.001.001
       BEGIN                                                            1007475001.001.001
       IF paramOnly THEN                                                10074800ADC-190308
         BEGIN                                                          10074850ADC-190308
         REPLACE PTOKEN BY ETXTOK;                                      10074900ADC-190308
         GO TO EXIT;                                                    1007495001.001.001
         END                                                            10075000ADC-190308
       ELSE                                                             10075050ADC-190308
       IF LEECARD THEN                                                  10075100ADC-190308
         BEGIN                                                          1007515001.001.001
         REPLACE PTOKEN BY ETXTOK;                                      1007520001.001.001
         GO TO EXIT;                                                    1007525001.001.001
         END                                                            1007530001.001.001
       ELSE                                                             1007535001.001.001
         BEGIN                                                          1007540001.001.001
         REPLACE PTOKEN BY BADTOK;                                      10075450ADC-190308
         GO TO SIGUE;                                                   10075500ADC-190308
         END;                                                           1007555001.001.001
       END;                                                             1007560001.001.001
     IF (IF (NCC < 1) THEN                                              10075650ADC-191115
           TRUE                                                         10075700ADC-191115
         ELSE                                                           10075750ADC-191115
           P = "*") THEN                                                10075800ADC-191110
  %  IF (NCC < 1) THEN                                                  10075850ADC-191115
       BEGIN                                                            1007590001.001.001
       REPLACE PTOKEN BY EOLTOK,48"00";                                 1007595001.001.001
       szToken := 0;                                                    1007600001.001.001
       GO TO SIGUE;                                                     10076050ADC-191115
       END;                                                             1007610001.001.001
                                                                        1007615001.001.001
     IF (P IN numbers) THEN                                             10076200ADC-180810
       BEGIN                                                            1007625001.001.001
       SCAN Q:P FOR N:NCC WHILE IN ALFABASE2;                           1007630001.001.001
       SZTOKEN := NCC - N;                                              1007635001.001.001
       NCC     := N;                                                    1007640001.001.001
       IF (P IN numbers FOR SZTOKEN) THEN                               10076450ADC-180810
         BEGIN                                                          1007650001.001.001
         REPLACE PTOKEN BY NUMTOK;                                      10076550ADC-191110
         VLTOKEN := INTEGER (P,SZTOKEN);                                1007660001.001.001
         END                                                            1007665001.001.001
       ELSE                                                             1007670001.001.001
         REPLACE PTOKEN BY IDNTOK;                                      1007675001.001.001
       REPLACE PTOK BY SZBYTESF(SZTOKEN),P FOR SZTOKEN," ";             1007680001.001.001
       END                                                              1007685001.001.001
     ELSE                                                               1007690001.001.001
     IF (P IN ALPHA) THEN                                               10076950ADC-190709
       BEGIN                                                            1007700001.001.001
       SCAN Q:P FOR N:NCC WHILE IN ALFABASE;                            1007705001.001.001
       SZTOKEN := NCC - N;                                              1007710001.001.001
       NCC     := N;                                                    1007715001.001.001
       REPLACE PTOKEN                                                   10077200ADC-180810
            BY IDNTOK,SZBYTESF(SZTOKEN),                                10077250ADC-180810
               P FOR SZTOKEN WITH lower2UPPER," ";                      10077300ADC-180810
       IF KEYWORD (TYPETOK) THEN                                        1007735001.001.001
         REPLACE PTOKEN BY SZTYPETOKF (TYPETOK);                        10077400ADC-191110
       END                                                              1007745001.001.001
     ELSE                                                               1007750001.001.001
     IF (P = """) THEN                                                  1007755001.001.001
       BEGIN                                                            1007760001.001.001
       SCAN Q:P+1 FOR N:9999 UNTIL IN FINSTRING;                        1007765001.001.001
       SZTOKEN := 9999 - N;                                             1007770001.001.001
       NCC :=* - SZTOKEN - 2;                                           1007775001.001.001
       Q :=* + 1;                                                       1007780001.001.001
       IF (Q-1 NEQ """) THEN                                            1007785001.001.001
         RETURN("FALTA COMILLA DERECHA");                               1007790001.001.001
       IF (SZTOKEN = 0) THEN                                            1007795001.001.001
         RETURN("LITERAL VACIO");                                       1007800001.001.001
       IF (SZTOKEN > MAXLARGOSTRING) THEN                               1007805001.001.001
         RETURN("STRING MUY LARGO");                                    1007810001.001.001
       REPLACE PTOKEN BY STRTOK,SZBYTESF(SZTOKEN),P+1 FOR SZTOKEN," ";  1007815001.001.001
       END                                                              1007820001.001.001
     ELSE                                                               1007825001.001.001
       BEGIN                                                            1007830001.001.001
       IF (P = "<" AND P+1 = ">") OR                                    1007835001.001.001
          (P = "<" AND P+1 = "=") OR                                    1007840001.001.001
          (P = ">" AND P+1 = "=") OR                                    1007845001.001.001
          (P = ":" AND P+1 = "=") OR                                    1007850001.001.001
          (P = "^" AND P+1 = "=") OR                                    1007855001.001.001
          (P = "=" AND P+1 = "=") THEN                                  1007860001.001.001
         SZTOKEN := 2                                                   1007865001.001.001
       ELSE                                                             1007870001.001.001
         SZTOKEN := 1;                                                  1007875001.001.001
       REPLACE PTOKEN BY CHRTOK,SZBYTESF(SZTOKEN),Q:P FOR SZTOKEN;      1007880001.001.001
       NCC := * - SZTOKEN;                                              1007885001.001.001
       END;                                                             1007890001.001.001
    EXIT:                                                               1007895001.001.001
     END OF NEXTTOKEN;                                                  1007900001.001.001
                                                                        1007905001.001.001
   PROCEDURE INICIO;                                                    10079100ADC-180810
     BEGIN                                                              1007915001.001.001
                                                                        1007920001.001.001
  %  syntaxErrors   := TRUE; % Para detectar falta de instrucciones     1007925001.001.001
     IF syntaxOnly THEN                                                 1007930001.001.001
       VGR_SYNTAX := 1;                                                 1007935001.001.001
     withTerminal   := IF (MYSELF.ORGUNIT.[15:1] = 1) AND               10079400ADC-180810
                          (MYSELF.STATION NEQ 0) THEN                   1007945001.001.001
                         TERM.AVAILABLE = 1                             1007950001.001.001
                       ELSE                                             1007955001.001.001
                         FALSE;                                         1007960001.001.001
     VGR_SIZE       := CGR_SIZEINICIAL;                                 1007965001.001.001
     VGR_FIRSTAVAIL := CGR_FIRSTAVAILINICIAL;                           1007970001.001.001
     VNS_SIZE       := CNS_SIZEINICIAL;                                 1007975001.001.001
     VNS_FIRSTAVAIL := CNS_FIRSTAVAILINICIAL;                           1007980001.001.001
     WFRECORD       := -1;                                              1007985001.001.001
     showCard       := TRUE;                                            1007990001.001.001
     Q              := IB;                                              1007995001.001.001
     IDATA          := 0;                                               1008000001.001.001
     NIDATA         := 0;                                               1008005001.001.001
     MAXIDATA       := SIZE (EDATA) - 1;                                1008010001.001.001
     GET_INXNEST;                                                       1008015001.001.001
     VNS_LASTSEQ [INXNEST] := MAXSEQ;                                   1008020001.001.001
     IF NOT (CFILE.OPEN) THEN                                           1008025001.001.001
       BEGIN                                                            1008030001.001.001
       CFILE.FILETYPE  := 7;                                            1008035001.001.001
       IF OPEN (CFILE, AVAILABLE) ^= 1 THEN;                            10080400ADC-190205
       END;                                                             1008045001.001.001
     IF CFILE.OPEN THEN                                                 10080500ADC-190205
       BEGIN                                                            10080550ADC-190205
       CARDRECSIZE := IF CFILE.FRAMESIZE=8 THEN                         10080600ADC-181206
                        CFILE.MAXRECSIZE                                10080650ADC-181206
                      ELSE CFILE.MAXRECSIZE*6;                          10080700ADC-181206
       REPLACE PTOKEN BY BADTOK;                                        1008075001.001.001
       IF withTerminal THEN                                             10080800ADC-180810
         SENDTERM ("Leyendo CFILE");                                    10080850ADC-181227
       LEECARD;                                                         1008090001.001.001
       END                                                              10080950ADC-190205
     ELSE                                                               10081000ADC-190205
       BEGIN                                                            10081050ADC-190205
       REPLACE IB BY POINTER(PARAM) UNTIL = 48"00",48"00";              10081100ADC-190205
       SCAN Q:IB FOR SIZE(IB) UNTIL = 48"00";                           10081150ADC-190205
       iText := 0;                                                      10081200ADC-181220
       lText := NCC := OFFSET(Q);                                       10081250ADC-190205
       iSeq := 0;                                                       10081300ADC-181204
       lSeq := 0;                                                       10081350ADC-181204
       iMarkid := 0;                                                    10081400ADC-181204
       lMarkid := 0;                                                    10081450ADC-181204
       SEQ := 0;                                                        10081500ADC-190205
       linePrinted := lineEnterm := FALSE;                              1008155001.001.001
       IF (VGR_LIST = 1) THEN                                           1008160001.001.001
         printLine;                                                     1008165001.001.001
       Q := IB[iText];                                                  10081700ADC-190205
       paramOnly := TRUE;                                               10081750ADC-190306
       END;                                                             10081800ADC-190205
     REPLACE dummy BY ERRORS.TITLE;                                     1008185001.001.001
     IF dummy ^= "ERRORS." THEN                                         1008190001.001.001
       printErrors := TRUE;                                             10081950ADC-190306
     END OF INICIO;                                                     1008200001.001.001
                                                                        1008205001.001.001
   PROCEDURE PROCESO;                                                   10082100ADC-180810
     BEGIN                                                              1008215001.001.001
     INTEGER                                                            10082200ADC-180920
       inxDS                                                            10082250ADC-180920
      ;                                                                 10082300ADC-180920
                                                                        1008235001.001.001
     procedureName := syntaxErrors;                                     1008240001.001.001
     syntaxOnly := (VGR_SYNTAX = 1);                                    1008245001.001.001
     IF NOT syntaxErrors AND NOT syntaxOnly THEN                        10082500ADC-180810
       BEGIN                                                            10082550ADC-180920
       IF withTerminal THEN                                             10082600ADC-180810
         SENDTERM ("Procesando Prefixed");                              10082650ADC-180920
       END;                                                             10082700ADC-180920
     END of Proceso;                                                    1008275001.001.001
 END OF NEXTTOKEN_DASDL;                                                10082800ADC-180813
                                                                        10082850ADC-180810
%-----------------------------------------------------------------------1008290001.001.001
                                                                        10082950ADC-180810
 NEXTTOKEN_DASDL                                                        10083000ADC-180813
   NT                                                                   10083050ADC-180810
  ;                                                                     10083100ADC-180810
                                                                        10083150ADC-180810
 DEFINE                                                                 10083200ADC-180810
   PROCESO = NT.PROCESO #                                               10083250ADC-180920
  ,INICIO = NT.INICIO #                                                 10083300ADC-180920
  ,NEXTTOKEN = NT.NEXTTOKEN #                                           10083350ADC-180810
  ,ERROR = NT.ERROR #                                                   10083400ADC-180810
  ,SEND = NT.SEND #                                                     10083450ADC-180810
  ;                                                                     10083500ADC-180810
                                                                        10083550ADC-180810
%-----------------------------------------------------------------------1008360001.001.001
 BOOLEAN PROCEDURE KEYWORD (TYPETOK);                                   10083650ADC-191115
  REAL  TYPETOK;                                                        10083700ADC-191115
  BEGIN                                                                 10083750ADC-191115
  REAL         IMIN, IMAX, I, INX;                                      10083800ADC-191115
  IMAX := KWINXMAX;                                                     10083850ADC-191115
  DO   BEGIN                                                            10083900ADC-191115
    I   := (IMIN + IMAX) DIV 2;                                         10083950ADC-191115
    INX := I * KWENTRYSIZE;                                             10084000ADC-191115
    IF (PTOK = POINTER(TABKEYWORD[INX+TKWTOKEN])                        10084050ADC-191115
               FOR SZBYTES+SZTOKEN)                                     10084100ADC-191115
    THEN BEGIN                                                          10084150ADC-191115
         KEYWORD := TRUE;                                               10084200ADC-191115
         TYPETOK := TABKEYWORD [INX+TKWTYPETOK];                        10084250ADC-191115
         IMIN    := IMAX + 1;                                           10084300ADC-191115
         END                                                            10084350ADC-191115
    ELSE IF (PTOK < POINTER(TABKEYWORD [INX+TKWTOKEN])                  10084400ADC-191115
                    FOR SZBYTES+SZTOKEN)                                10084450ADC-191115
    THEN IMAX := I - 1                                                  10084500ADC-191115
    ELSE IMIN := I + 1;                                                 10084550ADC-191115
    END                                                                 10084600ADC-191115
  UNTIL (IMIN > IMAX);                                                  10084650ADC-191115
 END OF KEYWORD;                                                        10084700ADC-191115
 REAL PROCEDURE ESCAPE;                                                 10084750ADC-191115
 BEGIN                                                                  10084800ADC-191115
   LABEL   EXIT;                                                        10084850ADC-191115
   REAL    INX, INITIAL_IESCSTACK;                                      10084900ADC-191115
   IF (IESCSTACK < 0) THEN GO TO EXIT;                                  10084950ADC-191115
   INITIAL_IESCSTACK := IESCSTACK;                                      10085000ADC-191115
   WHILE (PTOKEN NEQ ETXTOK)                                            10085050ADC-191115
   DO   BEGIN                                                           10085100ADC-191115
        WHILE (IESCSTACK >= 0)                                          10085150ADC-191115
        DO   BEGIN                                                      10085200ADC-191115
             INX := ESCSTACK [IESCSTACK];                               10085250ADC-191115
             CASE INX                                                   10085300ADC-191115
             OF   BEGIN                                                 10085350ADC-191115
                  CASE_ESCAPE;                                          10085400ADC-191115
             END OF CASE;                                               10085450ADC-191115
            IESCSTACK := * - 1;                                         10085500ADC-191115
            END;                                                        10085550ADC-191115
        NEXTTOKEN;                                                      10085600ADC-191115
    IESCSTACK := INITIAL_IESCSTACK;                                     10085650ADC-191115
    END;                                                                10085700ADC-191115
  INX := 0;                                                             10085750ADC-191115
 EXIT:                                                                  10085800ADC-191115
  ESCAPE := INX;                                                        10085850ADC-191115
 END OF ESCAPE;                                                         10085900ADC-191115
                                                                        10085950ADC-191115
 REAL PROCEDURE GETPROGRAM;                                             10086000ADC-191115
 BEGIN                                                                  10086050ADC-191115
                                                                        10086100ADC-191115
    LABEL        EXIT, LABA1, LABA2A1, LABA2B1;                         10086150ADC-191115
    BOOLEAN      ENTITYENTERED;                                         10086200ADC-191115
    REAL         INITIAL_IESCSTACK,                                     10086250ADC-191115
                 INXESCAPELABEL,                                        10086300ADC-191115
                 ENTITYRESULT,                                          10086350ADC-191115
                 INVOKERESULT;                                          10086400ADC-191115
    INTEGER actualLevel, len;                                           10086450ADC-191115
    ENTITYENTERED := TRUE;                                              10086500ADC-191115
 LABA1:                                                                 10086550ADC-191115
 LABA2A1:                                                               10086600ADC-191115
    IF (INVOKERESULT := GETLEVEL(0, actualLevel, 0, len) NEQ 0)         10086650ADC-191115
    THEN BEGIN                                                          10086700ADC-191115
         IF (INVOKERESULT = ISNTENTITY) THEN GO TO LABA2B1;             10086750ADC-191115
         RETURN (BADENTITY);                                            10086800ADC-191115
         END;                                                           10086850ADC-191115
    ENTITYENTERED := TRUE;                                              10086900ADC-191115
    GO TO LABA1;                                                        10086950ADC-191115
 LABA2B1:                                                               10087000ADC-191115
 EXIT:                                                                  10087050ADC-191115
    GETPROGRAM := ENTITYRESULT;                                         10087100ADC-191115
 END OF GETPROGRAM;                                                     10087150ADC-191115
                                                                        10087200ADC-191115
 REAL PROCEDURE GETLEVEL(inxFather, prevLevel, off, len);               10087250ADC-191115
 VALUE inxFather, prevLevel, off;                                       10087300ADC-191115
 INTEGER inxFather, prevLevel,off,len;                                  10087350ADC-191115
 BEGIN                                                                  10087400ADC-191115
                                                                        10087450ADC-191115
    LABEL        EXIT, LABA1, LABA2A1, LABA2A2A1, LABA2A2A2A1,          10087500ADC-191115
                 LABA2A2A2B1, LABA2B1, LABA2B2A1, LABA2B2B1, LABA2B3A1, 10087550ADC-191115
                 LABA2B3A2A1, LABA2B3A2B1, LABA2B3B1, LABA2B5, LABA2C1, 10087600ADC-191115
                 LABA2C2A1, LABA2C2A2A1, LABA2C2A2B1;                   10087650ADC-191115
    BOOLEAN      ENTITYENTERED;                                         10087700ADC-191115
    REAL         INITIAL_IESCSTACK,                                     10087750ADC-191115
                 INXESCAPELABEL,                                        10087800ADC-191115
                 ENTITYRESULT,                                          10087850ADC-191115
                 INVOKERESULT;                                          10087900ADC-191115
    INTEGER actualLevel, inx, childOff, childLen;                       10087950ADC-191115
 LABA1:                                                                 10088000ADC-191115
    IF (PTOKEN NEQ NUMTOK)                                              10088050ADC-191115
    THEN BEGIN                                                          10088100ADC-191115
         IF (NOT ENTITYENTERED) THEN RETURN (ISNTENTITY);               10088150ADC-191115
         ERROR ("<NUMERO> EXPECTED");                                   10088200ADC-191115
         RETURN (BADENTITY);                                            10088250ADC-191115
         END;                                                           10088300ADC-191115
    ENTITYENTERED := TRUE;                                              10088350ADC-191115
    IF (vlToken LEQ prevLevel) THEN                                     10088400ADC-191115
      RETURN (ISNTENTITY);                                              10088450ADC-191115
    actualLevel := vlToken;                                             10088500ADC-191115
    NEXTTOKEN;                                                          10088550ADC-191115
    IF (PTOKEN NEQ IDNTOK)                                              10088600ADC-191115
    THEN BEGIN                                                          10088650ADC-191115
         ERROR ("<IDENTIFICADOR> EXPECTED");                            10088700ADC-191115
         RETURN (BADENTITY);                                            10088750ADC-191115
         END;                                                           10088800ADC-191115
    inx := getAreaTABDB(CDB_GROUPSIZE*6+szToken+1);                     10088850ADC-191115
    REPLACE PDB_NAME(inx) BY pTok FOR szToken+szBytes;                  10088900ADC-191115
    VDB_OFFSET(inx) := off DIV 1;                                       10088950ADC-191115
    VDB_OCCURS(inx) := 1 DIV 1;                                         10089000ADC-191115
    IF actualLevel = 1 THEN addIspec(inx)                               10089050ADC-191115
    ELSE addChild(inxFather, inx);                                      10089100ADC-191115
    NEXTTOKEN;                                                          10089150ADC-191115
 LABA2A1:                                                               10089200ADC-191115
    IF (PTOKEN NEQ CHRTOK 48"01"".") THEN GO TO LABA2B1;                10089250ADC-191115
    NEXTTOKEN;                                                          10089300ADC-191115
    childOff := 0;                                                      10089350ADC-191115
 LABA2A2A1:                                                             10089400ADC-191115
    childLen := 0;                                                      10089450ADC-191115
 LABA2A2A2A1:                                                           10089500ADC-191115
    IF (INVOKERESULT := GETLEVEL(inx, actualLevel, childOff, childLen)  10089550ADC-191115
    NEQ 0)                                                              10089600ADC-191115
    THEN BEGIN                                                          10089650ADC-191115
         IF (INVOKERESULT = ISNTENTITY) THEN GO TO LABA2A2A2B1;         10089700ADC-191115
         RETURN (BADENTITY);                                            10089750ADC-191115
         END;                                                           10089800ADC-191115
    childOff :=* + childLen;                                            10089850ADC-191115
    len :=* + childLen;                                                 10089900ADC-191115
    VDB_LENGTH(inx) := len DIV 1;                                       10089950ADC-191115
    GO TO LABA2A2A1;                                                    10090000ADC-191115
 LABA2A2A2B1:                                                           10090050ADC-191115
    GO TO EXIT;                                                         10090100ADC-191115
 LABA2B1:                                                               10090150ADC-191115
    IF (PTOKEN NEQ RESTOK 48"03""PIC") THEN GO TO LABA2C1;              10090200ADC-191115
    NEXTTOKEN;                                                          10090250ADC-191115
    VDB_LENGTH(inx) := 1; %Por default                                  10090300ADC-191115
 LABA2B2A1:                                                             10090350ADC-191115
    IF (PTOKEN NEQ NUMTOK) THEN GO TO LABA2B2B1;                        10090400ADC-191115
    NEXTTOKEN;                                                          10090450ADC-191115
    VDB_PIC(inx) := CDB_NUMERIC DIV 1;                                  10090500ADC-191115
    GO TO LABA2B3A1;                                                    10090550ADC-191115
 LABA2B2B1:                                                             10090600ADC-191115
    IF (PTOKEN NEQ RESTOK 48"01""X")                                    10090650ADC-191115
    THEN BEGIN                                                          10090700ADC-191115
         ERROR ("ONE OF THE FOLLOWING EXPECTED");                       10090750ADC-191115
         SEND ("<NUMERO>");                                             10090800ADC-191115
         SEND ("X");                                                    10090850ADC-191115
         RETURN (BADENTITY);                                            10090900ADC-191115
         END;                                                           10090950ADC-191115
    NEXTTOKEN;                                                          10091000ADC-191115
    VDB_PIC(inx) := CDB_ALPHA DIV 1;                                    10091050ADC-191115
 LABA2B3A1:                                                             10091100ADC-191115
    IF (PTOKEN NEQ CHRTOK 48"01""(") THEN GO TO LABA2B3B1;              10091150ADC-191115
    NEXTTOKEN;                                                          10091200ADC-191115
    IF (PTOKEN NEQ NUMTOK)                                              10091250ADC-191115
    THEN BEGIN                                                          10091300ADC-191115
         ERROR ("<NUMERO> EXPECTED");                                   10091350ADC-191115
         RETURN (BADENTITY);                                            10091400ADC-191115
         END;                                                           10091450ADC-191115
    VDB_LENGTH(inx) := vlToken DIV 1;                                   10091500ADC-191115
    NEXTTOKEN;                                                          10091550ADC-191115
    IF (PTOKEN NEQ CHRTOK 48"01"")")                                    10091600ADC-191115
    THEN BEGIN                                                          10091650ADC-191115
         ERROR (") EXPECTED");                                          10091700ADC-191115
         RETURN (BADENTITY);                                            10091750ADC-191115
         END;                                                           10091800ADC-191115
    NEXTTOKEN;                                                          10091850ADC-191115
 LABA2B3A2A1:                                                           10091900ADC-191115
    IF (PTOKEN NEQ RESTOK 48"02""V9") THEN GO TO LABA2B3A2B1;           10091950ADC-191115
    NEXTTOKEN;                                                          10092000ADC-191115
    IF (PTOKEN NEQ CHRTOK 48"01""(")                                    10092050ADC-191115
    THEN BEGIN                                                          10092100ADC-191115
         ERROR ("( EXPECTED");                                          10092150ADC-191115
         RETURN (BADENTITY);                                            10092200ADC-191115
         END;                                                           10092250ADC-191115
    NEXTTOKEN;                                                          10092300ADC-191115
    IF (PTOKEN NEQ NUMTOK)                                              10092350ADC-191115
    THEN BEGIN                                                          10092400ADC-191115
         ERROR ("<NUMERO> EXPECTED");                                   10092450ADC-191115
         RETURN (BADENTITY);                                            10092500ADC-191115
         END;                                                           10092550ADC-191115
    VDB_DECIMALS(inx) := vlToken DIV 1;                                 10092600ADC-191115
    VDB_LENGTH(inx) := (VDB_LENGTH(inx)+vlToken)DIV 1;                  10092650ADC-191115
    NEXTTOKEN;                                                          10092700ADC-191115
    IF (PTOKEN NEQ CHRTOK 48"01"")")                                    10092750ADC-191115
    THEN BEGIN                                                          10092800ADC-191115
         ERROR (") EXPECTED");                                          10092850ADC-191115
         RETURN (BADENTITY);                                            10092900ADC-191115
         END;                                                           10092950ADC-191115
    NEXTTOKEN;                                                          10093000ADC-191115
    GO TO LABA2B5;                                                      10093050ADC-191115
 LABA2B3A2B1:                                                           10093100ADC-191115
    GO TO LABA2B5;                                                      10093150ADC-191115
 LABA2B3B1:                                                             10093200ADC-191115
 LABA2B5:                                                               10093250ADC-191115
    IF (PTOKEN NEQ CHRTOK 48"01"".")                                    10093300ADC-191115
    THEN BEGIN                                                          10093350ADC-191115
         ERROR (". EXPECTED");                                          10093400ADC-191115
         RETURN (BADENTITY);                                            10093450ADC-191115
         END;                                                           10093500ADC-191115
    NEXTTOKEN;                                                          10093550ADC-191115
    len := VDB_LENGTH(inx);                                             10093600ADC-191115
    GO TO EXIT;                                                         10093650ADC-191115
 LABA2C1:                                                               10093700ADC-191115
    IF (PTOKEN NEQ RESTOK 48"06""OCCURS")                               10093750ADC-191115
    THEN BEGIN                                                          10093800ADC-191115
         ERROR ("ONE OF THE FOLLOWING EXPECTED");                       10093850ADC-191115
         SEND (".");                                                    10093900ADC-191115
         SEND ("PIC");                                                  10093950ADC-191115
         SEND ("OCCURS");                                               10094000ADC-191115
         RETURN (BADENTITY);                                            10094050ADC-191115
         END;                                                           10094100ADC-191115
    NEXTTOKEN;                                                          10094150ADC-191115
    IF (PTOKEN NEQ NUMTOK)                                              10094200ADC-191115
    THEN BEGIN                                                          10094250ADC-191115
         ERROR ("<NUMERO> EXPECTED");                                   10094300ADC-191115
         RETURN (BADENTITY);                                            10094350ADC-191115
         END;                                                           10094400ADC-191115
    VDB_OCCURS(inx) := vlToken DIV 1;                                   10094450ADC-191115
    NEXTTOKEN;                                                          10094500ADC-191115
    IF (PTOKEN NEQ CHRTOK 48"01"".")                                    10094550ADC-191115
    THEN BEGIN                                                          10094600ADC-191115
         ERROR (". EXPECTED");                                          10094650ADC-191115
         RETURN (BADENTITY);                                            10094700ADC-191115
         END;                                                           10094750ADC-191115
    NEXTTOKEN;                                                          10094800ADC-191115
    childOff := 0;                                                      10094850ADC-191115
 LABA2C2A1:                                                             10094900ADC-191115
    childLen := 0;                                                      10094950ADC-191115
 LABA2C2A2A1:                                                           10095000ADC-191115
    IF (INVOKERESULT := GETLEVEL(inx, actualLevel, childOff, childLen)  10095050ADC-191115
    NEQ 0)                                                              10095100ADC-191115
    THEN BEGIN                                                          10095150ADC-191115
         IF (INVOKERESULT = ISNTENTITY) THEN GO TO LABA2C2A2B1;         10095200ADC-191115
         RETURN (BADENTITY);                                            10095250ADC-191115
         END;                                                           10095300ADC-191115
    childOff :=* + childLen;                                            10095350ADC-191115
    GO TO LABA2C2A1;                                                    10095400ADC-191115
 LABA2C2A2B1:                                                           10095450ADC-191115
    len := childOff * VDB_OCCURS(inx);                                  10095500ADC-191115
    VDB_LENGTH(inx) := len DIV 1;                                       10095550ADC-191115
 EXIT:                                                                  10095600ADC-191115
    GETLEVEL := ENTITYRESULT;                                           10095650ADC-191115
 END OF GETLEVEL;                                                       10095700ADC-191115
                                                                        10095750ADC-191115
 %----------------------------------------------------------------------10095800ADC-191115
    PTOKEN    := TOKARRAY;                                              10095850ADC-191115
    PTOK      := PTOKEN+SZTYPETOK;                                      10095900ADC-191115
    IESCSTACK := -1;                                                    10095950ADC-191115
 %----------------------------------------------------------------------10096000ADC-191115
    INICIO;                                                             10096050ADC-191115
    NEXTTOKEN;                                                          10096100ADC-191115
    GETPROGRAM;                                                         10096150ADC-191115
    PROCESO;                                                            10096200ADC-191115
 END of getLINCOFF;                                                     10173900          
                                                                        10174000          
 PROCEDURE dumpGroup(inx);                                              10174002ADC-191113
   VALUE             inx;                                               10174004ADC-191113
   INTEGER           inx;                                               10174006ADC-191113
   BEGIN                                                                10174008ADC-191113
   INTEGER                                                              10174010ADC-191113
     inxChild                                                           10174012ADC-191113
    ;                                                                   10174014ADC-191113
   POINTER                                                              10174016ADC-191113
     p                                                                  10174018ADC-191113
    ;                                                                   10174020ADC-191113
   PROCEDURE printItem(inxg);                                           10174022ADC-191113
     VALUE             inxg;                                            10174024ADC-191113
     INTEGER           inxg;                                            10174026ADC-191113
     BEGIN                                                              10174028ADC-191113
                                                                        10174030ADC-191113
     REPLACE p:dummy                                                    10174032ADC-191113
          BY PDB_NAME(inxg)+szBytes                                     10174034ADC-191113
              FOR REAL(PDB_NAME(inxg),1), " " FOR 20;                   10174036ADC-191113
     REPLACE p:dummy[20]                                                10174038ADC-191113
          BY VDB_OFFSET(inxg) FOR 4 DIGITS, "|",                        10174040ADC-191113
             VDB_OCCURS(inxg) FOR 2 DIGITS, "|",                        10174042ADC-191113
             VDB_LENGTH(inxg) FOR 4 DIGITS, "|",                        10174044ADC-191113
             VDB_DECIMALS(inxg) FOR 2 DIGITS, "|",                      10174046ADC-191113
             "N"FOR REAL(VDB_PIC(inxg)=CDB_NUMERIC).[0:1],              10174048ADC-191113
             "A"FOR REAL(VDB_PIC(inxg)=CDB_ALPHA).[0:1];                10174050ADC-191113
     WRITE(line, 132, dummy);                                           10174052ADC-191113
     END of printItem;                                                  10174054ADC-191113
                                                                        10174056ADC-191113
   inxChild := VDB_FIRSTITEM(inx);                                      10174058ADC-191113
   WHILE inxChild ^= NIL DO                                             10174060ADC-191113
     BEGIN                                                              10174062ADC-191113
     printItem(inxChild);                                               10174064ADC-191113
     IF VDB_PIC(inxChild) = CDB_GROUP THEN                              10174066ADC-191113
       dumpGroup(inxChild);                                             10174068ADC-191113
     inxChild := VDB_NEXTGROUP(inxChild);                               10174070ADC-191113
     END;                                                               10174072ADC-191113
   END of dumpGroup;                                                    10174074ADC-191113
                                                                        10174076ADC-191113
 PROCEDURE printGroup(inx, off, len);                                   10174100ADC-191112
   VALUE              inx, off, len;                                    10174200ADC-191112
   INTEGER            inx, off, len;                                    10174300ADC-191112
   BEGIN                                                                10174400          
   INTEGER                                                              10174500          
     inxChild                                                           10174600          
    ,i                                                                  10174650ADC-191112
    ;                                                                   10174700          
   POINTER                                                              10174800          
     p                                                                  10174900          
    ;                                                                   10175000          
                                                                        10175100          
   inxChild := VDB_FIRSTITEM(inx);                                      10175200          
   WHILE inxChild ^= NIL DO                                             10175300          
     BEGIN                                                              10175400          
     IF VDB_PIC(inxChild) = CDB_GROUP THEN                              10175500          
       printGroup(inxChild, off+VDB_OFFSET(inxChild),                   10175600ADC-191113
                  VDB_LENGTH(inxChild))                                 10175650ADC-191113
     ELSE                                                               10175700          
       BEGIN                                                            10175800          
       IF PDB_NAME(inxChild) ^= 48"06""FILLER" AND                      10175810ADC-191112
          PDB_NAME(inxChild)+6 ^= "GLB-SOURCE" AND                      10175820ADC-191112
          PDB_NAME(inxChild)+6 ^= "TRANNO" AND                          10175830ADC-191112
          PDB_NAME(inxChild)+6 ^= "INPUT-DATE" AND                      10175840ADC-191112
          PDB_NAME(inxChild)+6 ^= "ACTMTH" AND                          10175850ADC-191112
          PDB_NAME(inxChild)+6 ^= "ISPEC" THEN                          10175855ADC-191112
         BEGIN                                                          10175860ADC-191112
         i := 0;                                                        10175870ADC-191112
         THRU VDB_OCCURS(inx) DO                                        10175880ADC-191112
           BEGIN                                                        10175890ADC-191112
           REPLACE p:dummy                                              10175900          
                BY PDB_NAME(inxChild)+szBytes FOR 5, "|",               10176000ADC-191112
                   PDB_NAME(inxChild)+(szBytes+5)                       10176100ADC-191112
                    FOR (REAL(PDB_NAME(inxChild),1)-5)," " FOR 10;      10176150ADC-191112
           REPLACE p:dummy[16]                                          10176160ADC-191112
                BY "|",(i+1)FOR 2 DIGITS,                               10176200ADC-191112
                   "|",(off+VDB_OFFSET(inxChild)                        10176300ADC-191113
                         +i*VDB_LENGTH(inx)/VDB_OCCURS(inx)-151)        10176350ADC-191113
                          FOR 4 DIGITS,                                 10176360ADC-191113
                   "|",VDB_LENGTH(inxChild) FOR 2 DIGITS,               10176400ADC-191112
                   "|",VDB_DECIMALS(inxChild) FOR 2 DIGITS,             10176500ADC-191112
                   "|","N"FOR REAL(VDB_PIC(inxChild)=CDB_NUMERIC).[0:1],10176600ADC-191112
                       "A"FOR REAL(VDB_PIC(inxChild)=CDB_ALPHA).[0:1];  10176700ADC-191114
           IF VDB_PIC(inxChild) = CDB_ALPHA THEN                        10176720ADC-191114
             REPLACE p:p BY "|","N", "|"," "                            10176740ADC-191114
           ELSE                                                         10176760ADC-191114
             IF VDB_DECIMALS(inxChild) > 0 THEN                         10176780ADC-191114
               REPLACE p:p BY "|","Y", "|","."                          10176800ADC-191114
             ELSE                                                       10176820ADC-191114
               REPLACE p:p BY "|","N", "|"," ";                         10176840ADC-191114
           REPLACE p:p                                                  10176860ADC-191114
                BY "|","R"FOR REAL(VDB_PIC(inxChild)=CDB_NUMERIC).[0:1],10177000ADC-191114
                       "L"FOR REAL(VDB_PIC(inxChild)=CDB_ALPHA).[0:1],  10177100ADC-191112
                   "|"," " FOR 132;                                     10177200ADC-191112
           WRITE(PLAINTXT, 40, dummy);                                  10177300ADC-191113
           i :=*+1;                                                     10177320ADC-191112
           END;                                                         10177340ADC-191112
         END;                                                           10177350ADC-191112
       END;                                                             10177400          
     inxChild := VDB_NEXTGROUP(inxChild);                               10177500          
     END;                                                               10177600          
   END of printGroup;                                                   10177700          
                                                                        10177720ADC-191113
 VDB_SIZE := CDB_SIZEINITIAL DIV 1;                                     10177740ADC-191113
 VDB_VERSION := CDB_VERSION DIV 1;                                      10177760ADC-191113
 VDB_FIRSTAVAIL := CDB_FIRSTAVAILINITIAL DIV 1;                         10177780ADC-191113
                                                                        10177800          
 REPLACE dummy BY LINCOFF.TITLE;                                        10177820ADC-191113
 IF dummy = "LINCOFF." THEN                                             10177840ADC-191113
   BEGIN                                                                10177860ADC-191113
   REPLACE dummy BY MYSELF.USERCODE;                                    10177900          
   SCAN p:dummy UNTIL = ".";                                            10178000          
   p :=* - 1;                                                           10178100          
   REPLACE p BY "/LINCOFF."48"00";                                      10178200          
   REPLACE LINCOFF.TITLE BY dummy;                                      10178300          
   END;                                                                 10178350ADC-191113
                                                                        10178360ADC-191113
 REPLACE dummy BY "ARC/",LINCOFF.TITLE,48"00";                          10178370ADC-191113
 REPLACE PLAINTXT.TITLE BY dummy;                                       10178380ADC-191113
                                                                        10178400          
 getLINCOFF;                                                            10178500          
                                                                        10178600ADC-191113
 REPLACE dummy BY " " FOR 132;                                          10178610ADC-191113
 inx := VDB_FIRSTISPEC;                                                 10178620ADC-191113
 WHILE inx ^= NIL DO                                                    10178630ADC-191113
   BEGIN                                                                10178640ADC-191113
%  dumpGroup(inx);                                                      10178650ADC-191113
   inx := VDB_NEXTGROUP(inx);                                           10178660ADC-191113
   END;                                                                 10178670ADC-191113
                                                                        10178680ADC-191113
 inx := VDB_FIRSTISPEC;                                                 10178700          
 WHILE inx ^= NIL DO                                                    10178800          
   BEGIN                                                                10178900          
   printGroup(inx, 0, VDB_LENGTH(inx));                                 10179000ADC-191112
   inx := VDB_NEXTGROUP(inx);                                           10179100          
   END;                                                                 10179200          
 LOCK(PLAINTXT);                                                        10179250ADC-191113
 END.                                                                   10179300          
